[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Data Analysis",
    "section": "",
    "text": "Preface\nHere find a brief written and video introduction to computer software for doing data analysis. For a relatively small investment of time you gain an introduction to some of the same tools used by data scientists as they analyze data. And all for free.\nAlthough the following guidance for doing basic analyses does not involve programming, consisting only of simple function calls, it introduces analysis in the context of one of the most popular languages of data science: R. Specifically, the guidance presented here focuses on using my lessR package, part of the R ecosystem.\nThe following content includes both written and video instruction. Also, as you progress through this material, you will encounter some numbered lines of R instructions labeled Example, which appear as follows.\n\nExample 0.1 R stuff\n\nWe learn by doing. Run these instructions in R as you read through the following material and you will learn the basics of how data scientists do data science computations.\n↪ If you want to get it, you have to do it."
  },
  {
    "objectID": "01-Intro.html#overview",
    "href": "01-Intro.html#overview",
    "title": "1  Introduction to R",
    "section": "1.1 Overview",
    "text": "1.1 Overview\nWe begin with some basic concepts of data analytics. All data analysis, as in 100%, is done on the computer. We use R (R Core Team 2022) as the app for data analytics, the same analysis system many data scientists use doing real data science throughout the world.\nA core set of tasks form part of every analytics project:\n\nRead the data from a computer file into the analysis system, here R.\n\nCount the data values recorded for each variable with either a\n\nbar chart for a variable with relatively few unique values\nhistogram for a variable with many unique values\n\n\nThe following content explains how to access and use R to accomplish these essential tasks. Sequentially follow the provided instructions, from downloading R to your computer or use in the cloud, reading data into R, and then analyzing that data. Besides the provided, self-sufficient written instructions, also find optional referenced videos and reading material. To extend your analytic skills beyond this discussion, reference the article (Gerbing 2021), or the book (Gerbing 2023), for a wide range of data analyses illustrated and explained in detail.\nWork through the following content step-by-step. Identify each step as a numbered example. Each step is straightforward. Skipping steps or skimming the content, however, leads to nowhere except confusion.\n\n\n\n\n\n\nPractice as you go\n\n\n\nAs you proceed, follow along with your computer, actively running each example, guided by the written material and the linked videos.\n\n\nGet the basics down, and the rest readily follows.\n\n1.1.1 R vs. Excel\nExcel and R analyze data with functions. You already know more about using R than you thought you did. Excel implements many built-in functions, plus user-defined functions (which Excel calls macros), and so does R.\n\nFunction: Set of instructions to perform the computations that transform data values into results, the output of the analysis.\n\nThe input into a data analysis function is data. The output of a function can assume several forms:\n\ntext in the form of writing and tables\nvisualizations in a graphics format such as pdf or png\ndata transformed from the original input data.\n\nTo run an R program is to process the code, a sequence of function calls that perform the analyses.\n\n1.1.1.1 Function Calls\n\nR and Excel differ on how to instruct a function to do its work. To illustrate, consider the following six data values, the annual salaries of six employees at a company. According to the standard organization of data, find the variable name Salary in the first row of the Excel worksheet. The data values follow in the same column under the variable name.\nWhat is the average salary? Compute the average, more technically called the (arithmetic) mean, either with the Excel function average() or with the R function mean(). Both functions provide the same result, but the respective languages name their functions differently.\n\nFunction call: Computer instruction to process the computations of a function from within a data analysis system such as Excel or R.\n\nExcel function call. Enter the function call into a cell in the worksheet, sharing the same type of storage area, a worksheet cell, as the data values.\nIn this example, enter the function call beneath the column of data into the 8th cell in Column A. Specify the data for analysis with a cell range, such as the relative cell range A2:A7. This cell range refers to cells in the same column relative to the cell that contains the function call. This cell range extends from the cell in the second row of Column A to the cell in the seventh row.\nR function call. R works differently than a worksheet app. R processes the analysis instructions line-by-line in an area separate from the data, called the R console. Each line is called a command line, which contains a prompt, a >, for entering a command, that is, an R instruction.\n\n\n\n\n\n\nR prompt\n\n\n\nAt the > prompt in the R console, enter the name of the function designed to accomplish that analysis with the variable(s) to be analyzed, followed by Enter/Return.\n\n\nFigure 1.1 shows the R prompt for one line in the R console.\n\n\n\n\n\nFigure 1.1: R command line prompt.\n\n\n\n\nEach function has a name, such as Histogram() to display a histogram and related summary statistics such as the mean. The () indicates that the reference is to a function, which is where various values such as a variable name are passed to the function. To call a function for data analysis, in response to the R command prompt, >, enter the function name, a left parenthesis, usually at least one value such as the variable name for which to do the analysis, and then a matching right parenthesis.\nThe example in Figure 1.2 creates the histogram of variable Salary, as well as summary statistics that include the mean, by calling the Histogram() function for the variable Salary.\n\n\n\n\n\nFigure 1.2: Function call entered at the command prompt.\n\n\n\n\nData easily flows from an Excel worksheet into R. To begin this analysis, read the Excel worksheet that includes a variable named Salary into R from a simple instruction you enter at the command line.\nThat is it. To get the histogram and mean and more of the variable Salary after reading the data into R, at the > prompt enter the function call Histogram(Salary). To analyze the data values for a variable in R, refer to the variable’s name within the parentheses. Be aware of the exact spelling of the variable names, including capitalization, in this case beginning the function reference with an uppercase H.\nAs with the Excel example, this histogram analysis with R requires no programming. The programming was done by the people who wrote the functions referenced in the analysis. Instead of potentially writing complicated computer code, enter a simple function call to analyze the data. In this example, the R function accomplished much more than the computation of a simple mean. Just getting the histogram with Excel involves much more work.\nWe have seen that both Excel and R analyze the data values for a variable organized within a column, though with different user interfaces. R, however, presents several advantages.\n\n\n\n1.1.2 Advantages of R\nData scientists use R (or similar languages) for their analyses instead of Excel. Some reasons for the preference for R and related languages follow.\n\n\nExcel is great for data entry and viewing data as a spreadsheet app, but provides only the most basic statistical computations. Excel is not a serious app for data analysis.\n\n\nOnce the concept of working with R is understood, less work is required to conduct an analysis even directly from Excel data, such as simply entering Histogram(Salary), than can be obtained with the more cumbersome set of procedures offered by Excel.\n\n\nR does Big Data, efficiently handling data sets with millions of rows of data, limited only by the computer’s available memory.\n\n\nR separates the instructions for the analysis of data from the data. This separation makes debugging errors much more straightforward than Excel files that can include multiple, linked worksheets that can more easily hide errors.\n\n\nObtain each R analysis with one or more instructions, function calls, that can be saved for future use instead of irrecoverable mouse clicks. The results of R analyses are reproducible.\n\n\nThe multiple instructions to perform an R analysis precisely document how to conduct the analysis. As shown later, save these instructions in a file for later use to repeat the analysis.\n\nReproducibility: Analyses can be re-run in the future to reproduce previously obtained results.\n\nThe analyst typically does not enter code directly into R. Instead, write the R instructions into a file, able to retrieve and re-run the instructions at any time. Saving the R code allows for reproducible analysis. The instructions for analyses done by one person become accessible to all members of your organization with access to the file, including yourself, at any subsequent point in time. On the contrary, those Excel mouse clicks vanish into digital dust.\nAs I wrote in the Journal of Statistics and Data Science Education (Gerbing 2021):\n\n\n\n\n\n\nSeparate your data from the code\n\n\n\nFrom the perspective of data science, Excel worksheets exhibit a fundamental flaw, the confounding of the data with the instructions to process that data. Both data and data processing instructions are entered into adjacent cells stored within the same worksheet. On the contrary, R and related analysis systems separately store data and data processing instructions into different files (p. 251).\n\n\nCountless overly complex Excel worksheets that model business processes are horrendous to debug and understand in their complexity. Let the (moderate size) data reside within Excel, but use R or similar language to write your code that manipulates and analyzes your data. If needed, export the results of your specified computations back to Excel. R writes data to Excel files as easily as it reads data from Excel worksheets.\nSeparate your data from your code to process that data. Data analysis programming languages such as R provide that separation. In my opinion, Excel is vastly overused to the extent that it becomes a detriment to many business operations. Welcome, instead, to the world of data science.\n\n\n1.1.3 RStudio\nMost analysts run R from within an app called RStudio because of the additional features that RStudio provides. From RStudio, you are running R at the standard R command line from what is called the R console, but within the RStudio environment. The RStudio environment built around the R console provides the additional features.\nAs shown in Figure 1.3, the RStudio window consists of several resizable window panes. The primary window pane is the standard R console, the same console available from running R by itself. The bottom-right window pane with the Plots tab is where RStudio directs the data visualizations and can also display other information such as your file directory. The top-right window pane displays information such as your History of entered R instructions.\n\n\n\n\n\nFigure 1.3: RStudio window panes.\n\n\n\n\nR processes all instructions at the command prompt in the R console window pane. One option directly enters the instructions at the command prompt. The short-coming of this approach is that the instructions must be reentered every time the analysis is re-run. To provide for reproducibility from storing R code, add a fourth window pane in the top-left corner, labeled Script Files in Figure 1.3. Create a new R script file with the following menu sequence:\nFile menu --> New File --> R Script\nEnter R instructions into the script window, select one or more instructions, and press the Run button at the top-right of the window pane. RStudio will copy the selected information to the command prompt and run the instructions as if you had entered them directly into the console. Save the file of R script so that you to provide for reproducing or extending the analysis without having to re-type everything."
  },
  {
    "objectID": "01-Intro.html#start",
    "href": "01-Intro.html#start",
    "title": "1  Introduction to R",
    "section": "1.2 Getting Started",
    "text": "1.2 Getting Started\nDownload and install R on your computer, or run via a web browser in the cloud. The choice is yours. R works the same regardless of the platform. Of course, running in the cloud requires an active Internet connection. With your data and your data processing app on your own computer you maintain a level of independence and security not available with cloud processing, but to run R locally you do need a computing device with more than just a web browser.\nUnless you are interested in exploring both venues, there is no need to read the local computer and cloud sections. You can switch between a local computer and the cloud if you wish, but not needed unless you leave home with an iPad or similar device and use your computer at home.\n\nOn Your Computer\n    or\n\nIn the Cloud\n\nAfter accessing R on either your computer or the cloud, download and access the lessR extension that adds simplifying data analysis functions to R, making analysis with R more straightforward and accessible.\n\n1.2.1 On Your Computer\nRunning R on your computer requires to first download the R app to your computer, and, usually the RStudio app as well. Get them both at the same location.\nWhen installing R, choose your operating system from the links at the top of the corresponding web page. For Windows, the top of the resulting web page has the download link. For Mac, several paragraphs down, in the left margin, you have a choice. The first link in the margin is for arm64, the version for the more recently developed Apple M series processors. A second link, further down the margin, applies to Apple’s older Intel CPU computers. If not sure of your CPU type, go to the first choice under the Apple menu, About this Mac, and look at the information for Chip.\nIf you are asked the question, Install in a personal library? answer y for yes (unless you understand administrative privileges). The installer offers both 32-bit and 64-bit versions. Unless your computer is from around 2012 or earlier, run 64-bit software as you would any other app.\nOnce R and RStudio are downloaded, their installations proceed as with any app. Accept the given defaults for each step of the process. When installed, run R as you would any other application, such as double-clicking on the application’s icon in your file system display. Usually, however, run the RStudio app, which then automatically connects to and runs R in the RStudio environment.\n\n\n1.2.2 In the Cloud\nFrom the cloud, access R with a web browser on any computing device, such as a Chromebook or an iPad.\n\n1.2.2.1 The Cloud\nThe cloud refers to a computer but not the one on your desk.\n\nThe cloud: One or more computer servers, usually in locations unknown to the users, that run applications accessed via a standard web browser.\n\nAn important company in the R ecosystem, Posit (formerly RStudio, Inc.), provides a free, though limited, cloud account for running R within the app called RStudio. Access an R cloud account at:\nhttps://posit.cloud/\nIn general, running R in the cloud is the same as running R on your computer, with R and RStudio already pre-installed.\nCreate a free cloud account at the prompt, which provides 25 free hours per month. The good news is that 25 hours should be plenty of time to complete the assignments in the typical course that does basic data analysis on small to moderate size data sets. However, this time limit is not just the time the computer requires to perform the data analysis computations but also includes the time that a cloud project is open. Wait to log into your account until you are ready to enter the commands needed to do an analysis, and then log out of your account when an analysis is complete. View your account status by clicking on the icon at the top-right with your initials.\nTypically not needed, but even paying a small amount for monthly access to R in the cloud can be much cheaper than buying a computer or upgrading to a more powerful computer. Of course, the strategy of off-loading computer processing and storage applies to not just running R, but to many types of data processing. Many companies now maintain and access data bases in the cloud. Many people store not just data files, but photographs, videos and other types of information in the cloud.\n\n\n1.2.2.2 New project\nOrganize your analyses by project, maybe one project for all your homework assignments. Each project corresponds to a different data analysis project. To begin, select the New Project drop-down menu, then New RStudio Project, as in Figure 1.4.\n\n\n\n\n\nFigure 1.4: Create a new project.\n\n\n\n\nClick on the initial project name Untitled Project shown in Figure 1.5 toward the top of the window and type in a new name, HW or something.\n\n\n\n\n\nFigure 1.5: Name your project.\n\n\n\n\nThe next time you login click on that project name you will access R and RStudio ready for analysis exactly as it was when you last left that project.\n\n\n1.2.2.3 Upload data to the cloud\nYour cloud account provides no direct access to data files on your computer. This lack of computer access makes no difference if reading a file from the web. However, to access a data file that resides on your own computer from your cloud account, first upload the data file. To upload, go the right-bottom window pane of your RStudio session and select the Files tab at the top-left of the window pane. Then select the Upload tab, shown in Figure 1.6.\n\n\n\n\n\nFigure 1.6: Upload a data file to the cloud.\n\n\n\n\nThe Files tab reveals the files in your cloud folder. You will see your data file appear there after uploading.\n\n\n1.2.2.4 Logout and login\nWhen finished, at the top-right corner of the web page, click your initials and log out, shown in Figure 1.7.\n\n\n\n\n\nFigure 1.7: Logout of your cloud account.\n\n\n\n\nThe next time you log in, either select the project you were working on, or create a new one.\n\n\n\n1.2.3 lessR Enhancements\nStandard R is for geeks. R analyses typically involve writing programming code well beyond just a few function calls. I have made R for basic data analysis more straightforward with my 45 or so functions that complement the standard R functions, such as my Histogram() function. These functions, and the more extensive and helpful error diagnostics they provide, result in a more or less “un-geeked” R. The set of these functions are included in the package called lessR, the basis for my article in the Journal of Statistics and Data Science Education, Gerbing (2021), and book, Gerbing (2023).\n\n\n\n\n\n\nNo programming involved\n\n\n\nlessR function calls are straightforward – only function calls, no programming required to obtain comprehensive results.\n\n\nlessR organizes functions into what the R ecosystem refers to as a package. The full R ecosystem, available on servers worldwide, consists of the hundreds of base (standard) R functions included with the installation of R, plus the functions found in additional packages that fulfill a strict set of requirements before published on the R servers. Downloading R installs all the base R functions. Separately download packages such as lessR to access additional functions, all accessed via the standard R environment.\nRunning R, within RStudio or by itself, on either your computer or in the cloud, one time only, download the lessR package of functions (and associated dependent packages) from the worldwide network of R servers. At the R console command prompt, >, enter the following instruction (function call) into the R console, then press Enter/Return.\nVideo: install lessR [1:28]\n\nExample 1.1   \n\n\ninstall.packages(lessR)\n\nIf asked the following question about compilation, answer no.\nDo you want to install from sources the package which\n   needs compilation? (Yes/no/cancel)\nThis installation process involves not only downloading the lessR functions, but also many packages on which lessR depends. The entire process takes some seconds to a minute or so, depending on the speed of your Internet connection.\nOnce downloaded, R stores the lessR functions in your R library created for you during the installation process. To access these functions for a specific R session, retrieve them from the library.\n\n\n\n\n\n\nAlways begin with library(“lessR”)\n\n\n\nAt the beginning of every R session, first invoke the R function call library(\"lessR\") that retrieves the lessR functions from your library for data analysis.\n\n\nVideo: library(“lessR”) [1:04]\n\nExample 1.2   \n\n\nlibrary(\"lessR\")\n\nDoes it work? If the lessR functions successfully load from your R library, the following appears, which includes some instructions for getting started with R and lessR. These instructions include how to read data from files on your computer system into R for analysis and how to access examples of various analyses.\nlessR 4.2.8                         feedback: gerbing@pdx.edu \n--------------------------------------------------------------\n> d <- Read(\"\")   Read text, Excel, SPSS, SAS, or R data file\n  d is default data frame, data= in analysis routines optional\n\nLearn about reading, writing, and manipulating data, graphics,\ntesting means and proportions, regression, factor analysis,\ncustomization, and descriptive statistics from pivot tables.\n  Enter:  browseVignettes(lessR)\n\nView changes in this and recent versions of lessR.\n  Enter: news(package=\"lessR\")\n\nInteractive data analysis.\n  Enter: interact()\nIf this information does not appear when you enter library(\"lessR\"), then the lessR package is not installed in your R library. Consider running R/RStudio with the free plan in the cloud instead of on your computer.\nOccasionally update your R packages. To update, enter:\nupdate.packages(ask=FALSE)\nThis instruction updates lessR as well as the packages upon which lessR depends, and any other packages you may have installed. Or, if using RStudio, from the Tools menu, you can also select Check for Package Updates....\n\n\n\n\nGerbing, David. 2021. “Enhancement of the Command-Line Environment for Use in the Introductory Statistics Course and Beyond.” Journal of Statistics and Data Science Education 29 (3): 251–66. https://doi.org/10.1080/26939169.2021.1999871.\n\n\n———. 2023. R Data Analysis Without Programming: Explanation and Interpretation. 2nd ed. Routledge Publishing.\n\n\nR Core Team. 2022. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/."
  },
  {
    "objectID": "02-Data.html#dt",
    "href": "02-Data.html#dt",
    "title": "2  Data",
    "section": "2.1 Data Table",
    "text": "2.1 Data Table\nData analysis begins with, well, data. Analyze the data values for at least one variable, such as the company’s employee annual salaries. Organize the data values into a specific kind of structure from which analysis proceeds. To use any data analysis system such as R, organize the data values into a table.\nVideo: Data Table [4:05]\n\nData table: Organize data values into a rectangular data table with the name of each variable at the top of a column followed by its data values in the remainder of the column.\n\nStore the structured data values within a computer file located on your computer, an accessible local network, or the world wide web. Encode the data table in one of a variety of computer file formats. The formats we encounter are Excel files, indicated by a file type of .xlsx, and text files in the form of comma-separated value files (csv). Identify a text file with one of several potential file types, such as .txt, but usually .csv.\nThe data table in Figure 2.1, formatted as an Excel file, contains four variables: Years, Gender, Dept, and Salary plus an ID field called Name for a total of five columns. Figure 2.1 displays data values for these variables for just the first six employees.\n\n\n\n\n\nFigure 2.1: Structure of a data table.\n\n\n\n\nDescribe the data table by its columns, rows, and cell entries.\n\nVariable name. A short, concise word or abbreviation that identifies a column of data values in a data table.\n\nAnalysis of data can only proceed with the data table identified and the relevant variables in the data table identified by their names.\n\n\n\n\n\n\nAnalyze variables\n\n\n\nAll R functions analyze the data values within a data table for one or more specified variables, identified by their names, such as Salary.\n\n\nAnalysis requires the correct spelling of each variable name, including the same pattern of capitalization.\n\nData value: The contents of a single cell of a data table, a specific measurement, except for the first row, which (usually) contains the variable names.\n\nThe name “variable” was chosen because the data values for a variable vary. Obvious but worth articulating because statistics is the analysis of that variability. The practice of statistics is the analysis of the data values of a single variable and analyses that relate the data values of different variables.\nVariables define the columns of a data table. What about the rows?\n\nObservation: A row of the data table that contains the data for a specific instance of a single person, organization, place, event, or whatever is the object of analysis.\n\nUnfortunately, the reference for the rows of the data table is not standardized. Observations are also referred to as cases, examples, samples, instances, and observations.\nConsider employee Darnell Ritchie. He has worked at the company for seven years, identifies as a man, and works in administration with an annual salary of $43,788.26. Two data values in this section of the data table are missing. The number of years James Wu has worked at the company is not recorded, nor is the department in which Alissa Jones works."
  },
  {
    "objectID": "02-Data.html#read",
    "href": "02-Data.html#read",
    "title": "2  Data",
    "section": "2.2 Read Data into R",
    "text": "2.2 Read Data into R\nTo begin an analysis, read your data stored as a computer file into R. Your data organized as a data table exists somewhere as a data file stored somewhere on a computer system, your computer or a network, including the web.\n\n\n\n\n\n\nRead your data into R, then analyze\n\n\n\nRead the data table into an R data frame (table) with the Read() function, then analyze specific variables in that data table, each referenced by its name.\n\n\nThe data table can exist in one of many different formats, including Excel. Figure 2.2 shows a data table as an Excel file named employee.xlsx stored on a (Macintosh) computer. Figure 2.1 shows the first several lines of this data table in detail.\n\n\n\n\n\nFigure 2.2: Data table, named employee.xlsx, stored as an Excel file.\n\n\n\n\nThe data table is stored as a computer file. To analyze your data, read the data table from the computer file, which copies the data into a corresponding data table within a running R session.\n\nData frame: A data table stored within an active R session, referenced by its name.\n\nIn the function call to read the data, reference the data table stored on a computer system, including the web, by its file name and location. Each variable in a data table has a name, and so does the data table itself. When read into R, name the data table, the R data frame, with a name of your choice. Regardless of the file name of your data on your computer system, typically name the data table within the active R session, the data frame, as simply d for data. Not only is d easy to type, but it is also the lessR default data frame name for the data processed by its various analysis functions.\nWhen analyzing data read into R, the same data exists in two locations: a computer file on your computer system and an R data frame within a running R app. Different locations, different names: same data. On your computer system, identify the data table by its file name and location. A running R app identifies the same data from the data file by its data frame name as read into R, such as d.\nDo a function call to read the data from a file into a data frame of a running R application. Analogous to multiple Excel worksheets in a single Excel file, a running R session can contain multiple data frames, though we usually work with only one, usually with the name of d for data. Multiple read functions are available from R as downloaded and from functions in different packages. We use the lessR function Read() for its simplicity and helpful output to better understand the data that R reads into a data frame.\n\n2.2.1 Browse for the Data Table File\nTo read the data, direct R to the location of the data file. R cannot read the data file until it knows where the data is stored. One option is to browse for the location of the data file on your computer system. You navigate your file system until you locate the file.\n\n\n\n\n\n\nBrowse to locate your data file to read\n\n\n\nTo locate your data file by browsing through your file system, call the Read() function with an empty file reference, (\"\"), literally nothing between the quotes: Read(\"\").\n\n\nIf you are running R/RStudio in the cloud, your “local” computer is your cloud account, not the computer from which you are accessing the cloud. That “computer” could be any device, such as a tablet or an iPhone that does not even run R. So first upload your data file to your cloud account, as shown in the previously link reference cloud directions.\nThe following Read() statement reads the data stored as a rectangular data table from an external file stored on your computer system such as an Excel file. The Read() statement reads the data from the file into an R data frame called d. The empty quotes indicate to R to open your file browser to locate the data file that already exists somewhere on your computer system.\nVideo: Read Data [3:35]\n\nExample 2.1  \n\n\nd <- Read(\"\")\n\nAs with all R (and Excel and Python and everything else) functions, the call to invoke the function includes a matching set of parentheses. Information within the parentheses specifies the information provided to the function for analysis.\nThe <- in the Read() statement indicates to assign what is on the right of the expression, here the data read from an external file, to the object on the left, here the R data frame stored within the R session, named d in this example. You can also use an ordinary equals sign, =, to indicate the assignment, but the <- shows the flow of information in the assignment, and is more widely used by R practitioners.\n\n\n2.2.2 Specify Location of the Data Table File\nOne way to locate a data file to be read explicitly specifies the location of the file within the quotes and parentheses of the Read() function. Specify either the full path name of a file on your computer system, or specify a web address that locates the data table on the web. Again, read the data into the d data frame, remembering to include the quotes.\n\n\n\n\n\n\n\nRead data from a specified location\n\n\n\nd <- Read(\"path name\" or \"web address\")\n\n\n\nWith Excel, R, or any other computer apps that process data, enclose character string values, such as a file name or web address (URL), in quotes. For example, to read the data from the web data file employee.xlsx into the data frame d, invoke the following Read() function call.\n\nExample 2.2  \n\n\nd <- Read(\"http://web.pdx.edu/~gerbing/data/employee.xlsx\")\n\nTo specify a location of the data file on your computer, provide the full path name that locates and names your data file. To obtain this path name, first browse for the file with Read(\"\"). The resulting output displays the path name of the identified file. Copy this path name and insert between the quotes of Read(\"\"), save this and other R function calls in a text file for future analyses without needing to browse for its location.\nIn summary, with the Read() function, either put nothing between the quotes to browse for a data file, or specify the data file’s location on your computer system or the web. Direct the data read from a file into an R data frame, usually named d, but can choose any valid name.\n\n\n2.2.3 Output of Read()\nR organizes analyses by variable name, so knowing the exact variable names is critical. This specification includes the pattern of capitalization. The Read() function automatically displays these names. The variables are in the columns, so to specify a variable is to select a column of data values.\nRead() also displays the type of how each variable is stored in the computer, as numbers with or without decimal digits, or as character strings. Also listed are the number of complete and missing values for each variable, the number of unique values for each variable, and sample data values. Figure 2.3 lists the output from reading the employee.xlsx data file.\n\n\n\n\n\nFigure 2.3: Annotated output of Read() function with the Variable Name column highlighted.\n\n\n\n\nAlways compare the output of ‘Read()’ with the actual data file to ensure that your data was correctly read. Never read data into R or any other system without first ensuring that the data values in the data table stored on some computer system correspond to the variables and data values read into a R data frame.\nTo allow for the display of many variables, Read() lists the information for each variable in a row. Of course, the data file organizes the variables by column. Compare the output of Read() with the description of the data file in Figure 2.1 and Figure 2.2."
  },
  {
    "objectID": "02-Data.html#display-the-data",
    "href": "02-Data.html#display-the-data",
    "title": "2  Data",
    "section": "2.3 Display the Data",
    "text": "2.3 Display the Data\nTo analyze data, first understand the data. You should know what the data values look like for each variable, and you should know the variable names. The output of the lessR function Read() assists this understanding, but often you want to view the data directly.\nAfter reading the data into R, you can view all or some of the contents of the newly created data frame. The rule is that to view the contents of any R object, of which there are many types, enter the name of the object at the console, in response to the command prompt >.\nVideo: Display the Data [1:49]\n\nExample 2.3  \n\n\nd\n\nOr, use the R head() function to list the variable names and, by default, the first six rows of data, here for the data frame d.\n\nExample 2.4  \n\n\nhead(d)\n\nThe separation of data from the instructions to process that data is a significant benefit of R over Excel. You should, however, view your data on a regular basis in order to understand what you are analyzing.\n\n\n\n\n\n\nView your data\n\n\n\nWhen doing data analysis with R, frequently access the head() function so you can view some of the data you are analyzing.\n\n\nWhen something does not work the way you expected it to work, look at your data! Often the problem can be fixed because the computer stored your data differently than the way you thought the data would be stored. Instead of trying to fix a problem by guessing, first look at your data.\n\n\n              Name Years Gender Dept    Salary JobSat Plan Pre Post\n1 Ritchie, Darnell     7      M ADMN  53788.26    med    1  82   92\n2        Wu, James    NA      M SALE  94494.58    low    1  62   74\n3      Hoang, Binh    15      M SALE 111074.86    low    3  96   97\n4    Jones, Alissa     5      W <NA>  53772.58   <NA>    1  65   62\n5   Downs, Deborah     7      W FINC  57139.90   high    2  90   86\n6   Afshari, Anbar     6      W ADMN  69441.93   high    2 100  100\n\n\nCompare this output, the representation of the data within R, to the data table in Figure 2.1 as an Excel file. Same data, different locations. Note the representation of missing data.\n\nR missing data code: NA and <NA>for not available indicates missing data for numerical and non-numerical variables, respectively.\n\nThe blank cells in the Excel file, Figure 2.1, are replaced with either NA for the numerical variable Years, and <NA> for the variable Dept with non-numerical values.\nR also provides a corresponding function tail() that lists the data values at the end of the file."
  },
  {
    "objectID": "02-Data.html#two-types-of-variables",
    "href": "02-Data.html#two-types-of-variables",
    "title": "2  Data",
    "section": "2.4 Two Types of Variables",
    "text": "2.4 Two Types of Variables\nAlways distinguish continuous variables from categorical variables. This distinction between these two types of variables is fundamental in data analysis.\n\nContinuous (quantitative) variable: A numerical variable with many possible values.\n\n\nCategorical (qualitative) variable: A variable with relatively few unique labels as data values.\n\nExamples of continuous variables are Salary or Time, defined on a numerical scale with many unique values. Examples of categorical variables are Gender or State of Residence. Each categorical variable has just a relatively few number of possible values compared to a continuous value. This distinction of continuous and categorical variables is common to virtually every data analysis project.\nSometimes that distinction gets a little confusing because variables with integer values, which are numeric, could be quantitative or qualitative. For example, sometimes Man, Woman, and Other are encoded as 0, 1, and 2, respectively, for three levels of the categorical variable Gender. However, these integer values are just labels for different non-numeric categories. Best to avoid this confusion. Instead, encode categorical variables with non-numeric values, such as Gender, for example, with M, W, and O for Other.\nTo distinguish between continuous and categorical variables, determine if the values of a variable are on a numerical scale, presumably with a relatively large number of unique values that can be ordered from smallest to largest value. A categorical variable such as Gender, however, coded numerically, does not imply the values are on a numerical scale. For example, Woman coded a 1, is not more than Man, coded as 0, or vice versa."
  },
  {
    "objectID": "03-Visualization.html#bar-chart-and-pie-chart",
    "href": "03-Visualization.html#bar-chart-and-pie-chart",
    "title": "3  Visualize the Data",
    "section": "3.1 Bar Chart and Pie Chart",
    "text": "3.1 Bar Chart and Pie Chart\nOne of the most encountered data visualizations is the bar chart. Create a bar chart or pie chart from the categories (levels) of a categorical variable with a number associated with each category. First, the bar chart.\n\nBar Chart: Plot a bar for each level of a categorical variable with its height scaled according to the value of the associated numerical variable.\n\nA bar chart requires two variables to plot, the categorical variable of interest and the associated numerical variable. The number associated with each level (category) could be any number. A bar chart is constructed from the values of the two variables expressed as a table with two columns. One column contains the name of each category of the categorical variable. In the second column of this simple table is the number associated with each category. The height of each bar is proportional to the number associated with the corresponding level.\nWhat is the source of the numbers in the table, a numerical variable, from which the bar chart is constructed? There are three possibilities.\n\nProvide the table directly to the bar chart function. The numbers could be anything. A common application is reading this table from some publication and then creating the bar chart without access to the original data. For example, from a table of the amount of wine grapes produced in tons for different varietals during a given year in Oregon, visualize the production number for each varietal with a bar chart.\nThe computer constructs a summary table from the original data, a pivot table in Excel language. A common application is the count of how many times each category appeared in the data. For example, from the class grade book, how many students in the class received an A for their course grade? An A-? … and so on.\n\nThe computer constructs the summary table as a statistic computed for an additional variable, a continuous variable, separately for each level of the categorical variable. One example is average salary computed for each department in a company, and then plotted as a bar chart.\n\n\nFrequency distribution: A pivot table constructed by counting the number of times each value occurred in the data for a variable.\n\nThe lessR bar chart function, BarChart(), provides both the bar chart and the summary table from which the bar chart is constructed.\n\n3.1.1 Bar Chart from Measurements\nOne possibility creates the bar chart from the data table of measurements. Data analysis ultimately begins with the measured data values. To plot a bar chart, first read the data table of measurements from a computer file into the R data frame named d.\n\nRaw data: The original, measured data values before any summarization or transformation.\n\nAn example of raw data is the data table of employees with variables such as Salary and Gender in Figure 2.1. The data values for each employee are the original data values from which the analysis begins, recorded as measurements. To begin the analysis, read these data values into an R data frame, usually named \\(d\\).\n\n3.1.1.1 From the R Console\nConsider a data frame of the raw data that contains a categorical variable, here with the generic name \\(x\\). For a specific analysis, \\(x\\) takes on a specific name, such as Gender or Dept.\nEnter the function call to create a bar chart directly into the R console. The instruction in Figure 3.1 creates the bar chart of the count of each category for a categorical variable named \\(x\\), and the table of counts (frequencies).\n\n\n\n\n\nFigure 3.1: Instruction to create a bar chart of the counts of each category for the generically named categorical variable \\(x\\) in the default \\(d\\) data frame.\n\n\n\n\nA call to a function to create a bar chart necessarily contains the name of the variable with values that are the categories to plot. For example, for categorical variable Gender, values of Woman, Man, and Other.\nWith the BarChart() function, the name of the categorical variable is the first value passed to the function, and often, as in this example, the only value passed to the function. If the data frame is named d, then do not need the data parameter. If a bar chart is constructed from two variables, and only the categorical variable is supplied to the function, what is the unspecified numerical variable?\n\n\n\n\n\n\nCounts for each category\n\n\n\nWhen only the name of one categorical variable name is passed to BarChart(), the visualization is of the variable’s distribution, the height of the bar for each category as the corresponding count of the number of occurrences.\n\n\nTo illustrate, return to the data in Figure 2.1. First, read the data into R as the d data frame. Given the data, BarChart() tabulates and displays the number of employees in each department, according to the variable named Dept. The values of Dept are in the default data frame (table) named d.\nThe result is the bar chart in Figure 3.2 for the distribution of the values of the categorical variable Dept. The only information passed to BarChart() in this example is the name of the categorical variable to analyze. In this situation, by default, BarChart() identifies the count of occurrence of each category in the data as the corresponding numerical variable to plot.\nVideo: Bar Chart of Counts [3:08]\n\nExample 3.1  \n\n\n\n\n\nBarChart(Dept)\n\n\n\n\nFigure 3.2: The distribution of variable Dept visualized as the bar chart of tabulated counts of employees in each department.\n\n\n\n\nObtain the same analysis by including the data parameter to explicitly identify the name of the data frame, here the default value d.\nBarChart(Dept, data=d)\nAgain, if the data frame that contains the variable of interest is named d, then no need to include the data parameter. If the data frame name is something other than d, then include the parameter to identify the data table that contains the variable of interest. When doing R analyses you can have as many data tables as your computer memory will allow.\nThe BarChart() function provides a default color theme, which also labels each bar with the associated percentage of values for the corresponding category.\n\n\n3.1.1.2 Interactive Analysis\nAnother way to construct the corresponding bar chart uses the lessR interactive analysis, called by entering interact(\"BarChart\") into the R console. Then you can create a bar chart and explore different forms of the bar chart simply by clicking with your mouse.\nVideo: Create a bar chart interactively [before 4:04 does interactive bar charts on your computer, after 4:04 does bar charts with a cloud account.]\nIf you do interactive plots in a cloud account and if you save the interactive plot (instead of taking a screen shot), RStudio will save the plot in your cloud home directory (folder). Navigate to this directory by clicking on the Cloud icon in the Files tab in the bottom-right window pane, then click in the corresponding folder that contains the pdf file, as shown in the second half of the video linked above.\n\n\n3.1.1.3 Statistical Output\nThe BarChart() function provides the tabular form of the frequency distribution, an example of a pivot table, as part of its text output to the R console, as shown in the above output. The counts appear in the row labeled Frequencies, with the categories in the previous row.\nFrom the frequency distribution that pairs a number with each category or level of the variable of interest, BarChart() visualizes that pairing with the bar chart. In this example, the frequency distribution reveals that there are five accountants (ACCT), six administrators (ADMN), four financial analysts (FINC), six marketers (MKTG), and 15 people working in sales (SALE). From this information, a bar chart function defines the bars and their associated heights.\n\n\n\n3.1.2 Bar Chart from Summary Table\nA bar chart visualizes the number associated with each category. In the previous example, the data entered into the analysis consisted of the raw data, the original measurements. The BarChart() function then automatically proceeded to tabulate how many times each level of the categorical variable occurred in the data. From this tabulation it constructed the summary table of two columns, pairing each level of the categorical variable with its corresponding computed frequency of occurrence, the count.\nDept Freq\nACCT    5\nADMN    6\nFINC    4\nMKTG    6\nSALE   15\nFrom this table the bars on the bar chart were drawn.\nIn general, construct a bar chart from any table that lists the pairing of each category with some number, which is then translated into the height of the bar for that category. The summary table need not be a frequency distribution, a count of how many times each value occurred. Indeed, the table of categories and corresponding numbers could be completely nonsensical. To apply in the real world, of course, the table usually provides meaningful information, even if not counts. One example is the height of the starting center for each team in a basketball league. The table would be a list of all the teams in the league, each team paired with a number such as 83, for 83 inches tall.\nContinuing the previous example of employment in various company departments, suppose the summary table of the counts is already available, but not the raw data, the original data table of measurements. Maybe you found a company report that listed the count of employees in each department, and from that table, wish to create the corresponding bar chart.\nIn this instance, read the summary table into R as the data to analyze, the values that BarChart() implicitly computed in the previous example. Or, easily compute the summary table, the category and counts, in Excel directly, as a pivot table, or even more simply with the lessR function pivot(). Or, if available from another source, enter the summary table directly into Excel. In the following example, locate the already constructed summary table on the web.\n\nd <- Read(\"http://web.pdx.edu/~gerbing/data/DeptCount.xlsx\")\n\nAfter reading the data into the R data frame d, display the contents of the resulting small data frame (table).\n\nd\n\n  Dept Freq\n1 ACCT    5\n2 ADMN    6\n3 FINC    4\n4 MKTG    6\n5 SALE   15\n\n\nThis summary (pivot) data table contains the two variables relevant to the analysis, categorical variable Dept, and numerical variable Freq. The summary table contains only one row for each value (category) of Dept. The values of the numerical variable specify the scaled height of the bar for the corresponding category.\nTo create the bar chart from the summary table, specify the categorical variable as before, and then specify the numerical variable that maps to each bar’s height. For a categorical variable named \\(x\\), and a numerical variable named \\(y\\), following is the general form of the call to BarChart() that reads data from a summary table.\n\n\n\n\n\nFigure 3.3: Instruction to create a bar chart for the categorical variable \\(x\\) given the numerical value of variable \\(y\\) for each category, both variables in the \\(d\\) data frame, here a summary table.\n\n\n\n\nFor this example, the categorical \\(x\\) variable is named Dept, and the numerical \\(y\\) variable is named Freq. Both variables are in the d data frame, so no need to specify data=d in the call to BarChart() because the name d is assumed unless otherwise specified.\n\n\n\n\n\n\nA bar chart from a summary table\n\n\n\nIf the numerical variable \\(y\\) is explicitly specified, BarChart() identifies the data in summary (pivot) table form instead of the original measurements.\n\n\nWhen the data are a summary table, BarChart() reads the values of the \\(y\\) variable, here Freq, directly instead of computing its values.\n\nExample 3.2  \n\n\nBarChart(Dept, Freq)\n\nThis R instruction, a function call, creates the identical bar chart shown in Figure 3.2. Here, instead of constructing the bar chart from the original measurements and let BarChart() implicitly calculate the summary table of departments and counts, BarChart() directly accesses the already computed summary table. Include the numerical variable as the second parameter value in the call to BarChart(), which indicates to read data from a two column summary (pivot) table.\n\n\n3.1.3 More Bar Charts and Beyond\nThere is more to know. If you would like to learn more about bar charts, I wrote a fun article for medium.com (Gerbing 2019). The link provides free access.\nFor a more comprehensive understanding of data visualization, see my May 2020 book on the topic (Gerbing 2020).\n\n\n3.1.4 Pie Chart from Measurements\nAn alternative to the bar chart is the pie chart. Data visualized as a bar chart for a single variable can also be represented with a pie chart.\n\nPie Chart: Relate each level of a categorical variable to the area of a circle (pie) scaled according to the value of an associated numerical variable.\n\n\nAs with the bar chart, obtain the pie chart of the frequencies of a categorical variable, generically named \\(x\\). Of course, replace the generic name with the actual variable name for any one analysis. After reading the data, create the ring chart version of the pie chart.\n\n\nknitr::include_graphics(rep(\"images/pcExplain.png\"))\n\n\n\n\nFigure 3.4: Instruction to generate a pie (ring) chart of the counts of each category for the generically named categorical variable \\(x\\) in the \\(d\\) data frame.\n\n\n\n\nFor a single variable, the pie chart presents an alternative visualization of the data provided by the bar chart. As with the bar chart, in lessR you can create the pie chart interactively by entering interact(\"PieChart\") into the R console. Figure 3.5 displays the pie chart in the form of a doughnut or ring chart.\nVideo: Pie Chart of Counts [1:26]\n\nExample 3.3  \n\n\n\n\n\nPieChart(Dept)\n\n\n\n\nFigure 3.5: Ring chart version of a pie chart for variable Dept in the \\(d\\) data frame.\n\n\n\n\nThe doughnut or ring chart is a reasonable alternative to the standard bar chart. The lessR function PieChart() also can create the “old-fashioned” pie chart. We have seen the summary statistics several times now, so turn off the output to the R console here with the quiet parameter. Set the hole size in the doughnut or ring chart with the parameter hole, which specifies the proportion of the pie occupied by the hole.\n\nExample 3.4  \n\n\nPieChart(Dept, hole=0, quiet=TRUE)\n\n\n\n\nFigure 3.6: Standard pie chart of variable Dept in the \\(d\\) data frame.\n\n\n\n\nThe default hole size is 0.65. Set that value to 0 to close the hole."
  },
  {
    "objectID": "03-Visualization.html#hist",
    "href": "03-Visualization.html#hist",
    "title": "3  Visualize the Data",
    "section": "3.2 Histogram",
    "text": "3.2 Histogram\nFor a continuous variable, can plot the counts with a histogram. Unlike a categorical variable, a continuous variable presents many different, numeric values. The underlying continuity requires a different approach than for the bar chart, the binning of the data. The resulting visualization of how the values of a continuous variable are distributed is a histogram.\n\nBins: A sequence of adjacent, non-overlapping intervals, each generally of the same size.\n\n\nHistogram: Group similar data values from a continuous variable together into a bin, then assign a single count to each bin.\n\nOne possibility creates the histogram and associated statistics from a continuous variable using lessR by entering interact(\"Histogram\") into the R console. Or, directly call the lessR function Histogram(). In this example, create the histogram for the generic variable \\(x\\).\n\n\n\n\n\nFigure 3.7: Instruction to generate a histogram of the counts for each bin for the generically named continuous variable \\(x\\) in the \\(d\\) data frame.\n\n\n\n\nAs an example, consider the variable Salary in the d data frame, read from the data table illustrated in Figure 2.1. Find the histogram in Figure 3.8.\nVideo: Histogram [2:39]\n\nExample 3.5  \n\n\n\n\n\nHistogram(Salary)\n\n\n\n\nFigure 3.8: Histogram of Salary.\n\n\n\n\nWe get not only the histogram, but the corresponding frequency distribution from which the histogram is constructed, as well as summary statistics and an outlier analysis. The frequency distribution shows the sequence of bins and how many values are located within each bin.\nChoosing the best size for the bins is not a task that a computer algorithm can solve. Usually better to experiment with different bin sizes. For an undersmoothed histogram, bin width is too small. For an oversmoothed histogram, bin width is too large.\nTo control the width of the bins, use the bin_width parameter as part of the call to the Histogram() function. To adjust bin width interactively, enter interact(\"Histogram\") and click on the Bins section. Here explicitly set the bin width to 13,000 USD for the histogram of Salary instead of relying upon the default bin width provided by R. The resulting histogram in Figure 3.9 is smoother than the original in Figure 3.8. Also, in this example, turn off the console output with the quiet parameter.\n\nExample 3.6  \n\n\nHistogram(Salary, bin_width=13000, quiet=TRUE)\n\n\n\n\nFigure 3.9: Histogram of Salaries with a specified bin width of 13000.\n\n\n\n\nThere are many different parameters for most functions, discussed in the next section."
  },
  {
    "objectID": "03-Visualization.html#params",
    "href": "03-Visualization.html#params",
    "title": "3  Visualize the Data",
    "section": "3.3 Parameter Values",
    "text": "3.3 Parameter Values\nA variety of conditions control the output of each analysis, text or visualization. A bar chart or a histogram, for example, requires colors for the bars, colors for the bar edges, labels for the axes, and many other characteristics. In terms of text output, for example, the maximum width of each line must be pre-set before analysis begins.\nCharacteristics such as bar color and maximum line width are not hard-coded into the function but instead can be customized. This logic applies to any analysis system, such as Excel or R.\n\nParameter: A user-controlled value of a function’s code, a placeholder, that specifies some characteristic of the way the data is processed or the output of the function is displayed.\n\nEach function includes parameters to customize input or output. For any bar chart or histogram function from any analysis system, such as Excel or R, one parameter sets the color of the bars, and another parameter sets the color of the bar edges.\nTo use a function and have to manually select all the parameter values manually would be much too tedious.\n\nDefault parameter value: A preset value of a parameter, unless explicitly changed when invoking the function.\n\nEach function consists of several or even many different parameter values set at default values. For example, the BarChart() and Histogram() parameter fill sets the color that fills the bars. By default, BarChart() displays each bar in a different color, but the bars can also be set at the same color. To change the color of all the bars to a blue shade, in Figure 3.10 set the fill parameter to \"steelblue\", one of many R defined colors.1 Again, set the parameter quiet to TRUE to suppress the statistical output.\n\nExample 3.7  \n\n\nBarChart(Dept, fill=\"steelblue\", quiet=TRUE)\n\n\n\n\nFigure 3.10: Bar chart with bars filled a shade of blue.\n\n\n\n\nExplore these parameter values and their effect on the resulting visualization interactively with the lessR function interact(). To use, provide the name of the visualization contained in quotes, such as interact(\"BarChart\") or interact(\"Histogram\").\nVideo: Examine the code created for BarChart() from the interactive session. [3:26]\nParameter values can be numeric or a character string such as a word or a letter. As is true of all computer analysis systems such as Excel and R, if a parameter value is a character string, enclose its value in quotes. For example, \"steelblue\". Specify numbers without quotes, such as 1300 in the previous example of setting the bin width of a histogram.\nAlso, as is true of Excel and other analysis systems such as R, the general format for setting a parameter value within the call to a function follows in Figure 3.11. The three dots, ..., in the figure indicate other stuff that is part of the function call, such as a variable name.\n\n\n\n\n\nFigure 3.11: A parameter and its value in a function call.\n\n\n\n\nIn the BarChart() example above, fill names the parameter. The value of \"steelblue\" is the specific value set for that parameter. Explicitly setting that parameter value overrides the default value of BarChart(), which provides a different color for each bar.\nParameters control many aspects of the way that a function processes data, far more aspects than just color. You can rely upon the default parameter values, or add more paired parameter names and values as there are parameters to add. Customize the resulting bar chart, or rely upon the default values that lessR provides without customizing anything. Every R function has a help file that reveals the parameters associated with that function. To see all the possibilities of applying the function, display the help file for the function. To view its contents, enter a question mark, ?, followed by the function name.\nAs another example, there is a data parameter for lessR analysis functions such as BarChart() that specifies the name of the data table that contains the variable(s) to analyze. These functions default to the data table name d, so no need to specify the parameter if referring to the default name.\n?BarChart\nToward the beginning of the help file, find a list of all the parameters, their default values, and an explanation of each."
  },
  {
    "objectID": "03-Visualization.html#summary",
    "href": "03-Visualization.html#summary",
    "title": "3  Visualize the Data",
    "section": "3.4 Summary",
    "text": "3.4 Summary\nTo use R to do a data analysis requires at least three separate R functions. Run R either on your computer or in the cloud.\n\nRetrieve the lessR functions from your R library library(\"lessR\")\nRead the data from a file into R:\nd <- Read(\"\") to browse for the file,\nor,\nd <- Read(\"path name\" or \"web address\") to specify the location of the file\nAnalyze the data values for a specific variable, generically named x. Begin with the lessR function calls that count the data values that have occurred for variable x: Histogram(x) for a continuous variable, or BarChart(x) or PieChart(x) for a categorical variable.\n\nThe above steps can also be done interactively using the lessR function interact(). Specifically, to interactively create a bar chart, enter at the command line:\ninteract(\"BarChart\")\nTo interactively create a histogram, enter at the command line:\ninteract(\"Histogram\")\nYou can also use the abbreviations \"bc\" and \"hs\", respectively, to trigger the interactive sessions.\nBeyond lessR, find many, many analysis functions in base R as originally downloaded. Find even more functions in contributed packages such as lessR. \n\n\n\n\nGerbing, David. 2019. “Easy, Engaging Bar Charts from Simple to Sophisticated.” Medium.com. \"https://towardsdatascience.com/easy-bar-charts-from-simple-to-sophisticated-7270c03eced8?source=friends_link&sk=0a724c1bb0317fc494ae80fa0ae7b58b\".\n\n\n———. 2020. R Visualizations: Derive Meaning from Data. CRC Press."
  },
  {
    "objectID": "04-MoreStuff.html#report-generation",
    "href": "04-MoreStuff.html#report-generation",
    "title": "4  More Stuff",
    "section": "4.1 Report Generation",
    "text": "4.1 Report Generation\nFollow one of three methods for reporting your R analysis results. You choose the method. The simplest method is a manual copy and paste from R output, text and graphics, into a word processing document such as Word. Or, let R do the work for you, using one of two methods: Compile Report or Quarto. The Quarto method is ultimately the most useful but any method works.\n\n4.1.1 Copy and Paste\n For the first technique, manually construct a word processing document, such as for a homework assignment. Copy and paste text and graphics output from R into the MS Word or other word processing app document.\nText: All input and output to the R Console, with or without RStudio, is pure text. Select and copy the desired output and paste into MS Word or, for example, an email (no screenshot). Display the text in a mono-spaced font, such as Courier New. First, this lines up the columns of tables, and second, this distinguishes computer output in your writing from words that you write yourself, such as interpretative text.\nVisualizations: For RStudio use the Export button at the top of the window pane for Plots. Then select Copy to Clipboard and paste into the app such Word. Generally, re-size the image to better fit on the page, shown in Figure 4.1.\n\n\n\n\n\nFigure 4.1: Export an image from RStudio.\n\n\n\n\nIf running R by itself, right-click on each visualization, select Copy.\n\n\n4.1.2 Compile a Report\nSave R input instructions in a text file and run as a single unit with output to MS Word. From the File --> New File --> R Script menu sequence create a new file and save. Or, start with the + sign at the top-left corner of the RStudio window to create the new text file. Then enter the R instructions into the text file window pane.\nFrom the window pane, run the code with the Run button at the top-right of the window-pane for the file, shown in Figure 4.2. Or, even better, click on the Compile Report button. Then choose MS Word as the output medium.\n\n\n\n\n\nFigure 4.2: Compile Report and Run buttons on the toolbar of the RStudio text file window pane.\n\n\n\n\nYour choice: Enter and run individual instructions at the command line one-by-one or save your instructions over time to gradually build a collection to accomplish a variety of analyses. With this strategy, you can reproduce the output of any one analysis or do a simple modification to obtain a related analysis. Either way your data analyses get done.\nThe entire R analysis will run and output to Word, including the visualizations. From there, edit the Word document as desired. Video: Compile Report [4:40]\nThe only issue with the Word output is that if used for homework, there are no homework questions. Either copy and paste the questions into the Word doc from R, or the reverse copy sections from the R output into the homework assignment.\n\n\n4.1.3 Report from Quarto\n The most flexible technique from which to deliver an analysis straight from R uses what is called markdown to construct the report (such as this document). Follow these directions.\nDevelop your reports that use R for analytics directly in RStudio using Quarto as a single, integrated report. The output can be HTML for a web page, or .docx for MS Word. R can directly generate web pages and Word documents (plus pdf’s) as standard output using Quarto. To apply to homework assignments, copy and paste the homework questions into an RStudio text file, perhaps just the worked problems part of the homework. Then adjust R code as needed, plus your interpretations.\nAgain, a relatively small investment of time to obtain more useful skills for doing data analysis."
  },
  {
    "objectID": "04-MoreStuff.html#miscellaneous",
    "href": "04-MoreStuff.html#miscellaneous",
    "title": "4  More Stuff",
    "section": "4.2 Miscellaneous",
    "text": "4.2 Miscellaneous\n\n4.2.1 Get Help\nGet Help. lessR contains several documented sets of examples, called vignettes, each of which explains how to do a specified analysis. Access the vignettes with the R function call browseVignettes(\"lessR\"). The output is shown in Figure 4.3, which opens on a web page. Click on an HTML link for a given vignette to view its web page.\n\n\n\n\n\nFigure 4.3: Available vignettes for using lessR.\n\n\n\n\nAlternatively, as previously indicated, access the R manual for a function by entering a ? followed by the function name.\n\n\n4.2.2 Comments\nR recognizes as a comment any information that follows a # sign, either at the start of a new line or any place on an existing line, and write any comment you wish after that # sign that describes what the corresponding R code accomplishes. That helps you understand what you did at a later time.\n\n\n4.2.3 Color Themes\nData visualizations can be styled in different ways. The lessR style() function provides many color themes. The default is colors. Other styles include darkred and lightbronze. To change the style for all subsequent visualizations, enter the chosen theme name in quotes.\n\nstyle(\"darkred\")\n\nA call to the style function with a new theme changes many colors at once.\n\nIndividual properties of a visualization can also be customized separately from the entire theme. Two essential parameters for individual customization:\n\n\nfill for the interior color of a region such as a bar or a point\ncolor for the color of a line segment, either by itself or as the edge of a region such as a bar or point.\n\n\nTo see all available theme and individual properties amenable to customization, enter: style(show=TRUE)\n\nGenerally, rely upon the default styles, but customize as desired."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Gerbing, David. 2019. “Easy, Engaging Bar Charts from Simple to\nSophisticated.” Medium.com. \"https://towardsdatascience.com/easy-bar-charts-from-simple-to-sophisticated-7270c03eced8?source=friends_link&sk=0a724c1bb0317fc494ae80fa0ae7b58b\".\n\n\n———. 2020. R Visualizations: Derive Meaning from Data. CRC\nPress.\n\n\n———. 2021. “Enhancement of the Command-Line Environment for Use in\nthe Introductory Statistics Course and Beyond.” Journal of\nStatistics and Data Science Education 29 (3): 251–66. https://doi.org/10.1080/26939169.2021.1999871.\n\n\n———. 2023. R Data Analysis Without Programming: Explanation and\nInterpretation. 2nd ed. Routledge Publishing.\n\n\nR Core Team. 2022. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/."
  }
]