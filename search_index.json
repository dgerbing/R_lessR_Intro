[["index.html", "Data Analysis with R/lessR Preface", " Data Analysis with R/lessR  David Gerbing  The School of Business  Portland State University 2023-01-14 Preface Here find a brief introduction, in written and video format, to one of the primary languages of data science: R. This material presents some basic analyses, focusing on using my lessR package, part of the R ecosystem. The written material shows you how to use R. The videos show R running the instructions presented in the written material. As you read through this material you will encounter some numbered lines of R instructions labeled Example, which appear as follows. Example 0.1 R stuff We learn by doing. Run these instructions as you read through the following material and you will learn the basics of how data scientists do data science computations. ↪ If you want to get it, you have to do it.   "],["Rintro.html", "Section 1 Introduction to R 1.1 Overview 1.2 Getting Started", " Section 1 Introduction to R Data analytics is a fast developing, exciting topic of research and application that impacts many areas of our lives. We are today experiencing an authentic knowledge revolution that integrates the statistical analysis of data using computers. Here you are introduced to data analytics. After you spend a few hours learning the basics of the R software system for analytics, the rest is straightforward. From a small investment in learning how the system works, you gain access to much data analytic prowess using one of the primary languages of modern data science. 1.1 Overview We begin with some basic concepts of data analytics. All data analysis, as in 100%, is done on the computer. We use R (R Core Team 2022) as the app for data analytics, the same analysis system many data scientists use doing real data science throughout the world. A core set of tasks form part of every analytics project: Read the data from a computer file into the analysis system, here R. Count the data values recorded for each variable with either a bar chart for a variable with few unique values or a histogram for a variable with many unique values. The following content explains how to access and use R to accomplish these essential tasks. Sequentially follow the provided instructions, from downloading R to your computer or use in the cloud, reading data into R, and then analyzing that data. Besides the provided, self-sufficient written instructions, also find optional referenced videos and reading material. Work through the following content step-by-step. Each step is straightforward. Skipping steps or skimming the content, however, leads to nowhere except confusion. Follow along with your computer, actively running each step as you proceed through this material. Get the basics down, and the rest readily follows. 1.1.1 R vs. Excel Excel and R analyze data from function calls. You already know more about using R than you thought you did. Excel implements many built-in functions, plus user-defined functions (which Excel calls macros), and so does R. Function: Performs the computations that transform data values into the results, the output of the analysis. The input into a data analysis function is data. The output of a function can appear in several forms: text in the form of writing and tables data visualizations in a graphics format such as pdf or png data transformed from the original input data. To run an R program is to process the code, which consists of a sequence of activating functions to accomplish a corresponding sequence of analyses. 1.1.1.1 Function Calls R and Excel differ on how to instruct a function to do its work. To illustrate, consider the following six data values, the annual salaries of six employees at a company. Find the variable name Salary in the first row of the Excel worksheet that contains the data values, listed in the same column under the variable name. The standard organization of data for analysis lists the variable names in the first row. List data values for that variable in the corresponding column, beginning in the second row. What is the average salary? Compute the average, more technically called the (arithmetic) mean, either with the Excel function average() or with the R function mean(). Both functions provide the same result, but the respective languages name their functions differently. Function call: Process the computations of a function from within a data analysis system such as Excel or R. With Excel, enter the function call into a cell in the worksheet, sharing the same type of storage area, a worksheet cell, as the data itself. In this example, enter the function call beneath the column of data into the 8th cell in Column A. Specify the data for analysis with a cell range, such as the relative cell range A2:A7. This cell range refers to cells in the same column relative to the cell in which to enter the function call. This cell range extends from the cell in the second row of Column A to the cell in the seventh row. R works differently. Command line: R presents a prompt, &gt;, which indicates where to enter instructions for data analysis. Invoke R functions from the command line. Unlike Excel, R separates the data from the instructions to analyze that data, an advantage that contributes to the power of R for data analysis. With R, enter function calls at the command line apart from the storage area of the data. After entering an instruction in response to the &gt;, press Enter/Return, which instructs R to process the instruction, and then display a new prompt on a new command line. Instructions for an R data analysis consist of at least several lines of code entered at successive command lines. R can directly read data stored within an Excel worksheet. To begin this analysis, read the Excel worksheet into R from an instruction you enter at the command line. Instead of the mean() function, here invoke the more general Histogram() function, which computes the mean of Salary, plus many other statistics, plus the histogram. To analyze the data values for a variable in R, always refer to the variable’s name. R references the data values for a variable by the variable’s name. Always be aware of the exact spelling of the variable names that define the data, including capitalization. In this example, specify the data to analyze with the corresponding variable name, here Salary. As with the Excel example, there is no programming involved in this analysis with R. The programming was done by the people who wrote the functions. Instead of programming code, to use either Excel or R in this example, enter a simple function call to analyze the data. In this example, the R function accomplished much more than the computation of a simple mean. Achieving the equivalent analysis with Excel involves much more work. We have seen that both Excel and R analyze the data values for a variable organized within a column, though with different user interfaces. R, however, presents several advantages. 1.1.1.2 Advantages of R Data scientists use R (or similar languages) for their analyses instead of Excel. Some reasons for the preference for R and related languages follow. Excel is great for data entry and viewing data as a spreadsheet app, but provides only the most basic statistical computations. Excel not a serious app for data analysis. Once the concept of working with an app like R is understood, less time is required to conduct an analysis, such as entering a simple Histogram(Salary), obtained in Excel only with a cumbersome set of procedures. R does Big Data, efficiently handling data sets with millions of rows of data, limited only by the computer’s available memory. R separates the instructions for the analysis of data from the data. This separation makes debugging errors much more straightforward than complicated Excel files that can include multiple, linked worksheets that easily can contain hidden errors. Obtain each R analysis with one or more instructions, function calls, that can be saved for future use instead of irrecoverable mouse clicks. The results of R analyses are reproducible. The multiple instructions to perform an R analysis document exactly how to conduct the analysis. As shown later, save these instructions in a file for later use to repeat the analysis. Reproducibility: Analyses can be re-run in the future to reproduce previously obtained results. In real world data analysis no one enters code directly into R. Instead the analyst writes the R instructions into a file, able to retrieve and re-run the instructions at any time. Saving the R code allows for reproducible analysis. The saved R code instructs how to accomplish the analysis, a set of instructions anyone with access can repeat. The instructions for analyses done by one person become accessible to all applicable members of your organization at any subsequent point in time, including yourself. On the contrary, those Excel mouse clicks disappear into digital dust. As I wrote in my 2021 publication in the Journal of Statistics and Data Science Education (Gerbing 2021): “From the perspective of data science, Excel worksheets exhibit a fundamental flaw, the confounding of the data with the instructions to process that data. Both data and data processing instructions are entered into adjacent cells stored within the same worksheet. On the contrary, R and Python separately store data and data processing instructions into different files” (p. 251). Much better to separate your data from the code. Countless overly complex Excel worksheets for business processes are horrendous to debug and understand in their complexity. Let the (moderate size) data reside within Excel, but use Python or similar language to write your code that manipulates and analyzes your data. If needed, export the results of your specified computations back to Excel. Python writes data to Excel files as easily as it reads data from Excel worksheets. Separate your data from your code to manipulate that data. Data analysis programming languages such as Python and R provide that separation. In my opinion, Excel is vastly overused and a detriment to many business operations. Welcome, instead, to the world of real data science. 1.1.2 lessR Enhancements Standard R is for geeks. R analyses typically involve writing programming code well beyond just a few function calls. I have made using R for basic data analysis much more straightforward with my 45 or so functions that complement the standard R functions, such as my Histogram() function. These functions, and the much more extensive and helpful error diagnostics that my functions provide, result in a more or less “un-geeked” R. The set of these functions are included in the package called lessR, the basis for my article in the Journal of Statistics and Data Science Education. lessR function calls are straightforward – only function calls, no programming required to obtain comprehensive results. lessR organizes functions into what the R ecosystem refers to as a package. The full R ecosystem, available on servers worldwide, consists of the hundreds of base (standard) R functions included with the installation of R, plus the functions found in additional packages that fulfill a strict set of requirements before published on the R servers. Downloading R installs all the base R functions. Separately download packages such as lessR to access additional functions, all accessed via the standard R environment. 1.2 Getting Started Download and install R on your computer, or run via a web browser in the cloud. The choice is yours. R works the same regardless of the platform on which it is run. Of course, running in the cloud requires an active Internet connection. With your data and your data processing app on your own computer you maintain a level of independence and security not available with cloud processing, but to run R locally you do need a computer with more than just a web browser. Read one of the two following sections: Do R in the Cloud     or Do R on Your Computer. No need to read both sections unless you are curious about exploring both venues. If you wish, you can also use both approaches, switching back and forth, but usually no need to do, unless you carry around an iPad or related when away from home and use your computer when at home. After accessing R on either your computer or the cloud, the next step is to download and access lessR. 1.2.1 Do R in the Cloud From the cloud, access R with a web browser on any computing device, such as a Chromebook or an iPad. 1.2.1.1 The Cloud The cloud: One or more computer servers, usually in locations unknown to the users, that run applications accessed via a standard web browser. An important company in the R ecosystem, Posit (formerly RStudio, Inc.), provides a free, though limited, cloud account for running R within the app called RStudio at posit.cloud. Most people run R from within RStudio. In general, running R in the cloud is the same as running R on your computer. Just from examining the RStudio window you could not tell if you were running in the cloud or on your computer except that the listed file directory under the Files tab begins with Cloud. A free Posit account is limited in the sense that only 25 free hours are available per month. The good news is that 25 hours should be plenty of time to complete the assignments in the typical course that does basic data analysis on small to moderate size data sets. However, this time limit is not just the time the computer requires to perform the data analysis computations but also includes the time that a cloud project is open. Wait to log into your account until you are ready to enter the commands needed to do an analysis, and then log out of your account when an analysis is complete. View your account status by clicking on the icon at the top-right with your initials. Off-loading computer processing from your computer to the cloud, or even doing analysis without a standard computer, such as doing R analysis via a Chromebook or iPad, can save money. Typically not needed, but even paying a small amount for monthly access to R in the cloud can be much cheaper than buying a computer or upgrading to a more powerful computer. Of course, the strategy of off-loading computer processing and storage applies to not just running R, but to many types of data processing. Many companies now maintain and access data bases in the cloud. Many people store not just data files, but photographs, videos and other types of information in the cloud. 1.2.1.2 Instructions Access an R cloud account at: https://posit.cloud/ Create a free account at the prompt, and you are ready to go. 1.2.1.2.1 Create a new project Organize your analyses by project, maybe one project for all your homework assignments. Each project corresponds to a different data analysis project. To get started, select the New Project drop-down menu, then New RStudio Project. Figure 1.1: Create a new project. Select the initial project name Untitled Project at the top of the window and type in a new name, HW or something. Figure 1.2: Name your project. The next time you login click on that project name you will access R and RStudio ready for analysis exactly as it was when you last left that project. 1.2.1.2.2 Upload a data file to your cloud account The home directory is in your cloud account, with no direct access to files on your computer. This directory location makes no difference if reading a file from the web. However, if you enter your function calls directly into the R console, to access a data file that resides on your own computer, first upload the data file to your cloud account. To upload, go the right-bottom window pane of your RStudio session and select the Files tab at the top-left of the window pane. Then select the Upload tab. Figure 1.3: Upload a data file to the cloud. The Files tab reveals the files in your cloud folder. You will see your data file appear there after uploading. 1.2.1.2.3 Logout and login When finished, at the top-right corner of the web page, click your initials and log out. Figure 1.4: Logout of your cloud account. The next time you log in, either select the project you were working on, or create a new one. 1.2.2 Do R on Your Computer Running R on your computer, of course, requires to first download the R app to your computer. Although optional, most people also download a second app called RStudio from which to run R. Get both free apps at Download Data Science Apps. video: download R and RStudio [(3:44)] 1.2.2.1 Download and Run R R is free and runs the same on any Windows, Macintosh, or Linux/Unix computer. Getting R is straightforward, such as from the above link, which provides the link to download the app from the worldwide network of R servers. Download R. From the download link, choose your operating system from the links at the top of the corresponding web page. For Windows, the top of the resulting web page has the download link. For Mac, several paragraphs down, in the left margin, you have a choice. The first link in the margin is for arm64, which is the version for the more recently developed Apple M series processors. A second link, further down the margin, applies to Apple’s older Intel CPU computers. If not sure of your CPU type, go the first choice under the Apple menu, About this Mac, and look at the information for Chip. Install R. If, during installation, you are asked the question, Install in a personal library? answer y for yes (unless you understand administrative privileges, which are needed if R is installed system-wide). The installer offers both 32-bit and 64-bit versions. Unless your computer was made around 2012 or earlier, run 64-bit software as you would any other app. Once downloaded, the installation proceeds as with any app. Accept the given defaults for each step of the process. When installed, run the R app as you would any other application, such as double-clicking on the application’s icon in your file system display. When opened, R displays a window called the console. Enter instructions into the R console command line, where R presents the &gt; prompt. 1.2.2.2 Download and Run RStudio Usually, run R from within an app called RStudio because of the additional features that RStudio provides. You can download now, later, or never, but there are some advantages to running R from within RStudio. From RStudio, you are running R at the standard R console, but within the RStudio environment. As shown in the following figure, RStudio divides the main window into several window panes, all resizable to customize for a specific analysis. The primary window pane is the standard R console, the same console available from running R by itself. A second window pane is where RStudio directs the data visualizations and can also display other information such as your file directory. A third window pane displays your data or your history of entered R instructions. A potential fourth window pane in the top-left corner provides for files of R code, ready for analysis. Request this fourth window within RStudio by creating a new R script file as shown. File menu --&gt; New File --&gt; R Script Figure 1.5: RStudio window panes. R processes all instructions at the command prompt in the R console. One option is to enter the instructions at the command prompt. The short-coming of this approach is that the instructions need to be repeatedly entered every time the analysis is re-run. RStudio improves this process by providing a convenient way to both store R instructions in their own file and then run them from the command prompt. An analysis of saved R instructions is reproducible. You can then save the file of R script for later access. You, or someone else in your organization, can repeat or extend the analysis without having to re-type everything. Create a new R script file from the New File option on the RStudio File menu, which opens the top-left window pane in Figure 1.5. Then, enter R instructions into the script window, select one or more instructions, and press the Run button at the top-right of the window pane. RStudio will copy the selected information to the command prompt and run the instructions as if you had entered them directly into the console. Figure 1.6: RStudio Compile Report and Run buttons. Or, click on the Compile Report button and send the input from the Source window and subsequent output to an HTML file for reading with a web browser or a Word document (a pdf option is also available, but requires LaTeX software installed). Your choice: Enter and run individual instructions at the command line one-by-one or save your instructions over time to gradually build a collection to accomplish a variety of analyses. With this strategy, you can reproduce the output of any one analysis or do a simple modification to obtain a related analysis. Either way your data analyses get done. Run R by itself, or run R within RStudio. Either way, open the R app directly or open RStudio from which to access R, as you would any app on your computer. 1.2.3 Download and Access lessR To do a specific analysis, enter into the console, after the &gt; prompt, the name of the function designed to accomplish that analysis. Each function has a name, such as Histogram() to display a histogram. To call a function for data analysis, in response to the R command prompt, &gt;, enter the function name, a left parenthesis, a value such as the variable name for which to do the analysis, and then a matching right parenthesis. Running R, within RStudio or by itself, on either your computer or in the cloud, one time only, download the lessR package of functions (and associated dependent packages) from the worldwide network of R servers onto your computer. In response to the R console command prompt, &gt;, enter the following instruction (function call) into the R console, either running R by itself or within RStudio. After entering the instruction, press Enter/Return. video: install lessR [1:28] Example 1.1   If asked the following question about compilation, answer no. Do you want to install from sources the package which needs compilation? (Yes/no/cancel) This installation process involves not only downloading the lessR functions, but also many packages on which lessR depends. The entire process takes some seconds to a minute or so, depending on the speed of your Internet connection. Once downloaded, R stores the lessR functions in your R library created for you during the installation process. To access these functions for a specific R session, retrieve them from the library. At the beginning of every R session, first invoke the R function call library(\"lessR\") that retrieves the lessR functions from your library for data analysis. video: library(“lessR”) [1:04] Example 1.2   library(&quot;lessR&quot;) Does it work? If the lessR functions successfully load from your R library the following appears, which includes some instructions for getting started with R/lessR. These instructions include how to read data from files on your computer system into R for analysis and how to access documented examples of various analyses. lessR 4.2.5 feedback: gerbing@pdx.edu -------------------------------------------------------------- &gt; d &lt;- Read(&quot;&quot;) Read text, Excel, SPSS, SAS, or R data file d is default data frame, data= in analysis routines optional Learn about reading, writing, and manipulating data, graphics, testing means and proportions, regression, factor analysis, customization, and descriptive statistics from pivot tables. Enter: browseVignettes(&quot;lessR&quot;) View changes in this and recent versions of lessR. Enter: news(package=&quot;lessR&quot;) **Newly Revised**: Interactive data analysis. Enter: interact() If this information does not appear when you enter library(\"lessR\"), then the lessR package is not correctly installed into your R library. Consider running R/RStudio with the free plan in the cloud instead of on your computer. RStudio will copy the selected information to the command prompt and run the instructions as if you had entered them directly into the console. Every month or so, update your R packages. To update, enter: update.packages(ask=FALSE) This instruction updates lessR as well as the packages upon which lessR depends. Or, if using RStudio, from the Tools menu, select Check for Package Updates.... References "],["data-analysis-with-r.html", "Section 2 Data Analysis with R 2.1 Data 2.2 Visualize the Data 2.3 Summary", " Section 2 Data Analysis with R 2.1 Data 2.1.1 Data Table Data analysis begins with, well, data. Analyze the data values for at least one variable, such as the company’s employee annual salaries. Organize the data values into a specific kind of structure from which analysis proceeds. To use any data analysis system such as R, organize the data values into a table. video: Data Table [4:05] Data Table: Organize data values into a rectangular data table with the data values for each variable in a column, and the name of the variable at the top of the column. Store the structured data values within a computer file, on your computer, an accessible local network, or the world wide web. Encode the data table in one of a variety of computer file formats. The formats we encounter are Excel files, indicated by a file type of .xlsx, and text files in the form of comma-separated value files (csv). Identify a text file with one of several potential file types, such as .txt, but usually .csv. The data table in Figure 2.1, formatted as an Excel file, contains four variables: Years, Gender, Dept, and Salary plus an ID field called Name for a total of five columns. Figure 2.1 displays data values in the Excel file for these variables for just the first six employees out of many more. Figure 2.1: Structure of a data table. Describe the data table by its columns, rows, and cell entries. Variable name: A short, concise word or abbreviation that identifies a column of data values in a data table. Analysis of data can only proceed with the data table identified and the relevant variables in the data table identified by their names. All R functions analyze the data values within a data table for one or more specified variables, identified by their names, such as Salary. Analysis requires the correct spelling of each variable name, including the same pattern of capitalization. Data value: The contents of a single cell of a data table, a specific measurement, except for the first row, which contain the variable names. Example: Each row of the data table after the first row, the data for a specific instance of a single person, organization, place, event, or whatever is the object of analysis. Unfortunately, the notation for the rows of the data table is not standardized. Examples are also referred to as cases, samples, instances, and observations. Consider employee Darnell Ritchie. He has worked at the company for seven years, identifies as a man, and works in administration with an annual salary of $43,788.26. Two data values in this section of the data table are missing. The number of years James Wu has worked at the company is not recorded, nor is the department in which Alissa Jones works. 2.1.2 Read the Data into R To begin an analysis, read the data stored within a computer file into R. Your data organized as a data table exists somewhere as a data file stored on a computer system, on your computer or a network, including the web. The data table may be stored in one of many different formats, including Excel. Figure 2.2 shows a data table as an Excel file named employee.xlsx stored on a (Macintosh) computer. Figure 2.1 shows the first several lines of this data table in detail. Figure 2.2: Data table, named employee.xlsx, stored as an Excel file. To analyze data within a data table stored in a computer file, first read the data table from the computer file into a corresponding data table within a running R session. R refers to a data table within R according to its name. Data frame: A data table stored within an R session, referenced by its name. Reference the data table stored on your computer system by its file name and location. Each variable in a data table has a name, and so does the data table itself. When read into R, name the data table, the R data frame, with a name of your choice. Regardless of the file name of your data on your computer system, typically name the data table within the active R session, the data frame, as simply d for data. Not only is d easy to type, but it is also the lessR default data frame name for the data processed by its various analysis functions. When analyzing data read into R, the same data exists in two locations: a computer file on your computer system and an R data frame within a running R app. Different locations, different names: same data. On your computer system, identify the data table by its file name and location. A running R app identifies the same data from the data file by its data frame name, such as d. Do a function call to read the data from a file into a data frame of a running R application. Analogous to multiple Excel worksheets in a single Excel file, a running R session can contain multiple data frames, though we usually work with only one, usually with the name of d for data. Multiple read functions are available from R as downloaded and from functions in different packages. We use the lessR function Read() for its simplicity and helpful output to better understand the data that R reads into a data frame. 2.1.2.1 Browse for the Data Table File To read the data, direct R to the location of the data file. R cannot read the data file until it knows where the data is stored. One option locates the data file on your computer system by browsing for it. You navigate your file system until you locate the file. To locate your data file by browsing through your file system, call the Read() function with an empty file reference, (\"\"), literally nothing between the quotes. If you are running R/RStudio in the cloud, your “local” computer is your cloud account, not the computer from which you are accessing the cloud. That “computer” could be any device, such as a tablet and an iPhone that does not even run R. So first upload your data file to your cloud account, as shown in the previously link reference cloud directions. The following Read() statement reads the data stored as a rectangular data table from an external file stored on your computer system such as an Excel file. The Read() statement reads the data from the file into an R data frame called d. The empty quotes indicate to R to open your file browser to locate the data file that already exists somewhere on your computer system. video: Read Data [3:35] Example 2.1   d &lt;- Read(&quot;&quot;) As with all R (and Excel and Python and everything else) functions, the call to invoke the function includes a matching set of parentheses. Information within the parentheses specifies the information provided to the function for analysis. The &lt;- in the Read() statement indicates to assign what is on the right of the expression, here the data read from an external file, to the object on the left, here the R data frame stored within the R session, named d in this example. You can also use an ordinary equals sign, =, to indicate the assignment, but the &lt;- is more descriptive and more widely used by R practitioners. 2.1.2.2 Specify the Location of the Data Table File One way to locate a data file to be read explicitly specifies the location of the file within the quotes and parentheses of the Read() function. Specify either the full path name of a file on your computer system, or specify a web address that locates the data table on the web. Again, read the data into the d data frame, remembering to include the quotes. d &lt;- Read(\"path name\" or \"web address\") With Excel, R, or any other computer apps that process data, enclose character string values, such as a file name or web address (URL), in quotes. For example, to read the data from the web data file employee.xlsx into the data frame d, invoke the following Read() function call. Example 2.2   d &lt;- Read(&quot;http://web.pdx.edu/~gerbing/data/employee.xlsx&quot;) To specify a location of the data file on your computer, provide the full path name that locates and names your data file. To obtain this path name, first browse for the file with Read(\"\"). The resulting output displays the path name of the identified file. Copy this path name and insert between the quotes of Read(\"\"), save this and other R function calls in a text file. Run the code in the future to directly read the data file for future analyses without needing to browse for its location. In summary, with the Read() function, either put nothing between the quotes to browse for a data file, or specify the data file’s location on your computer system or the web. Direct the data read from a file into an R data frame, usually named d, but can choose any valid name. 2.1.2.3 Output of Read() R organizes analyses by variable name, so it is crucial to know the exact variable names. This specification includes the pattern of capitalization. The Read() function automatically displays these names. Specify an R analysis for one or more variables (columns) in the data frame (table). Rows and columns organize a data table. The variables are in the columns, so to specify a variable is to select a column of data values. Read() also displays the type of each variable stored in the computer, as numbers with or without decimal digits, or as character strings. Also listed are the number of complete and missing values for each variable, the number of unique values for each variable, and sample data values. Figure 2.3 lists the output from reading the employee.xlsx data file. Figure 2.3: Output of Read() function with the Variable Name column highlighted. To ensure that your data was read correctly, always compare the output of Read() with the actual data file. Never blindly read data into R or any other system without first verifying that the data values in the data table stored on some computer system match the variables and data values as read into an R data frame. To allow for many variables, Read() lists the information for each variable in a row. Note that the data file organizes the variables by column. Compare the output of Read() with the description of the data file in Figure 2.1 and Figure 2.2. 2.1.3 Display the Data To analyze data, first understand the data. You should know what the data values look like for each variable, and you should know the variable names. The output of the lessR function Read() assists this understanding, but often you want to view the data directly. After reading the data into R, you can view the contents of the newly created data frame. The rule is that to view the contents of any R object, of which there are many types, enter the name of the object at the console, in response to the command prompt &gt;. video: Display the Data [1:49] Example 2.3   d Or, use the R head() function to list the variable names and, by default, the first six rows of data, here for the data frame d. Example 2.4   head(d) A major advantage of R over Excel is the separation of data from the instructions to process that data. Still, you need to frequently view your data to understand what it is that you are analyzing. When doing data analysis with R, frequently invoke the head() function so you can view some of the data you are analyzing. When something does not work the way you expected it to work, then look at your data! Often the problem can be fixed because the computer stored your data differently than the way you thought the data would be stored. Instead of guessing when something goes wrong, first take a look at your data. ## Name Years Gender Dept Salary JobSat Plan Pre Post ## 1 Ritchie, Darnell 7 M ADMN 53788.26 med 1 82 92 ## 2 Wu, James NA M SALE 94494.58 low 1 62 74 ## 3 Hoang, Binh 15 M SALE 111074.86 low 3 96 97 ## 4 Jones, Alissa 5 W &lt;NA&gt; 53772.58 &lt;NA&gt; 1 65 62 ## 5 Downs, Deborah 7 W FINC 57139.90 high 2 90 86 ## 6 Afshari, Anbar 6 W ADMN 69441.93 high 2 100 100 Compare this output, the representation of the data within R, to the data table in Figure 2.1 as an Excel file. Same data, different locations. Note the representation of missing data. R missing data code: NA and &lt;NA&gt;for not available indicates missing data for numerical and non-numerical variables, respectively. The blank cells in the Excel file, Figure 2.1, are replaced with either NA for the numerical variable Years, and &lt;NA&gt; for the variable Dept with non-numerical values. R also provides a corresponding function tail() that lists the data values at the end of the file. 2.1.4 Two Types of Variables Always distinguish continuous variables from categorical variables. This distinction between these two types of variables is fundamental in data analysis. Continuous (quantitative) variable: A numerical variable with many possible values. Categorical (qualitative) variable: A variable with relatively few unique labels as data values. Examples of continuous variables are Salary or Time, all defined on a numerical scale with many unique values. Examples of categorical variables are Gender or State of Residence. Each categorical variable has just a relatively few number of possible values compared to a continuous value. This distinction of continuous and categorical variables is common to virtually every data analysis project. Sometimes that distinction gets a little confusing because variables with integer values, which are numeric, could be quantitative or qualitative. For example, sometimes Man, Woman, and Other are encoded as 0, 1, and 2, respectively, for three levels of the categorical variable Gender. However, these integer values are just labels for different non-numeric categories. Best to avoid this confusion. Instead, encode categorical variables with non-numeric values, such as Gender, for example, with M, W, and O for Other. To distinguish between continuous and categorical variables, determine if the values of a variable are on a numerical scale, presumably with a relatively large number of unique values that can be ordered from smallest to largest value. A categorical variable such as Gender, however, coded numerically, does not imply the values are on a numerical scale. For example, Woman coded a 1, is not more than Man, coded as 0, or vice versa. 2.2 Visualize the Data The most fundamental analysis of data is counting the occurrence of each data value, or group of similar data values. General Principle: Read the data table into an R data frame (table) with the Read() function, then analyze specific variables in that data table, each referenced by its name. All data analysis in R follows from the names of the relevant variables as stored within the relevant data table. In the function call for a data analysis, include the variable name, such as Salary, a continuous variable, or Gender, a categorical variable. The lessR Read() function lists the variable names as part of its output. Each analysis is of one or more variables, not the entire data table. Distinguish between the name of the data table, and the name of the variable(s) that exist within the data table. Effectively communicate the results with data visualizations. The type of visualization for counting data values, as with most analyses, depends on the type of variable, categorical or continuous. 2.2.1 Bar Chart and Pie Chart One of the most encountered data visualizations is the bar chart. Create a bar chart or pie chart from the categories (levels) of a categorical variable with a number associated with each category. First, the bar chart. Bar Chart: Plot a bar for each level of a categorical variable with its height scaled according to the value of the associated numerical variable. A bar chart requires two variables to plot, the categorical variable of interest and the associated numerical variable. The number associated with each level (category) could be any number. A bar chart is constructed from the values of the two variables expressed as a table with two columns. One column contains the name of each category of the categorical variable. In the second column of this simple table is the number associated with each category. The height of each bar is proportional to the number associated with the corresponding level. What is the source of the numbers in the table, a numerical variable, from which the bar chart is constructed? One possibility provides the table directly to the bar chart function. Here, the numbers could be anything. A common application is reading this table from some publication and then creating the bar chart without access to the original data. For example, from a table of the amount of wine grapes produced in tons for different varietals during a given year in Oregon, visualize the production number for each varietal with a bar chart. Or, the computer constructs a summary table from the original data, a pivot table in Excel language. A common application is the count of how many times each category appeared in the data. For example, from the class grade book, how many students in the class received an A for their course grade? An A-? … and so on. Yet another possibility constructs the summary table as a statistic computed for an additional variable, a continuous variable, separately for each level of the categorical variable. One example is average salary computed for each department in a company, and then plotted as a bar chart. Frequency distribution: A pivot table constructed by counting the number of times each value occurred in the data for a variable. The lessR bar chart function, BarChart(), provides both the bar chart and the summary table from which the bar chart is constructed. 2.2.1.1 Bar Chart from Measurements One possibility creates the bar chart from the data table of measurements. Data analysis ultimately begins with the measured data values. To plot a bar chart, first read the data table of measurements from a computer file into the R data frame named d. Raw data: The original, measured data values before any summarization or transformation. An example of raw data is the data table of employees with variables such as Salary and Gender in Figure 2.1. The data values for each employee are the original data values from which the analysis begins, recorded as measurements. To begin the analysis, read these data values into an R data frame, usually named d. 2.2.1.1.1 From the R Console Consider a data frame of the raw data that contains a categorical variable, here referred to with the generic name \\(x\\). For a specific analysis, \\(x\\) takes on a specific name, such as Gender or Dept. Here, enter the function call to create a bar chart directly into the R console. The following instruction creates the bar chart of the counts of occurrence of each category for a categorical variable named \\(x\\), and the table of counts (frequencies). Figure 2.4: Instruction to create a bar chart of the counts of each category for the generically named categorical variable x in the default d data frame. A call to a function to create a bar chart necessarily contains the name of the variable with values that are the categories to plot. For example, for categorical variable Gender, values of Woman, Man, and Other. With the BarChart() function, the name of the categorical variable is the first value passed to the function, and often, as in this example, the only value passed to the function. If the data frame is named d, then do not need the data parameter. If a bar chart is constructed from two variables, and only the categorical variable is supplied to the function, what is the unspecified numerical variable? When only the name of one categorical variable name is passed to BarChart(), the visualization is of the variable’s distribution, the height of the bar for each category as the corresponding count of the number of occurrences. To illustrate, return to the data in Figure 2.1. First, read the data into R as the d data frame. Given the data, BarChart() tabulates and displays the number of employees in each department, according to the variable named Dept. The values of Dept are in the default data frame (table) named d. The result is the bar chart in Figure 2.5 for the distribution of the values of the categorical variable Dept. Note that the only information passed to BarChart() in this example is the name of the categorical variable to analyze. By default, BarChart() identifies the count of occurrence of each category in the data as the corresponding numerical variable to plot. video: Bar Chart of Counts [3:08] Example 2.5   BarChart(Dept) Figure 2.5: The distribution of variable Dept visualized as the bar chart of tabulated counts of employees in each department. Obtain the same analysis by including the data parameter to explicitly identify the name of the data frame. BarChart(Dept, data=d) Again, if the data frame that contains the variable of interest is named d, then no need to include the data parameter. If the data frame name is something other than d, then include the parameter to identify the data table that contains the variable of interest. When doing R analyses you can have as many data tables as your computer memory will allow. The BarChart() function provides a default color theme, which also labels each bar with the associated percentage of values for the corresponding category. 2.2.1.1.2 Interactive Analysis Another way to construct the corresponding bar chart is to use the lessR interactive analysis, called by entering interact(\"BarChart\") into the R console. Then you can create a bar chart and explore different forms of the bar chart simply by clicking with your mouse. video: Create a bar chart interactively [before 4:04 does interactive bar charts on your computer, after 4:04 does bar charts with a cloud account.] If you do interactive plots in a cloud account and if you save the interactive plot (instead of taking a screen shot), RStudio will save the plot in your cloud home directory (folder). Navigate to this directory by clicking on the Cloud icon in the Files tab in the bottom-right window pane, then click in the corresponding folder that contains the pdf file, as shown in the second half of the video linked above. 2.2.1.1.3 Statistical Output The BarChart() function provides the tabular form of the frequency distribution, an example of a pivot table, as part of its text output to the R console, as shown in the above output. The counts appear in the row labeled Frequencies, with the categories in the previous row. From the frequency distribution that pairs a number with each category or level of the variable of interest, BarChart() visualizes that pairing with the bar chart. In this example, the frequency distribution reveals that there are five accountants (ACCT), six administrators (ADMN), four financial analysts (FINC), six marketers (MKTG), and 15 people working in sales (SALE). From this information, a bar chart function defines the bars and their associated heights. 2.2.1.2 Bar Chart from Summary Table A bar chart visualizes the number associated with each category. In the previous example, the data entered into the analysis consisted of the raw data, the original measurements. The BarChart() function then automatically proceeded to tabulate how many times each level of the categorical variable occurred in the data. From this tabulation it constructed the summary table of two columns that paired each level of the categorical variable with its corresponding frequency of occurrence, and from this table the bars on the bar chart were drawn. In general, construct a bar chart from any table that lists the pairing of each category with some number that translates into the height of the bar for that category. The summary table need not be a frequency distribution, a count of how many times each value occurred. Indeed, the table of categories and corresponding numbers could be completely nonsensical. To apply in the real world, of course, the table usually provides meaningful information, even if not counts. One example is the height of the starting center for each NBA team. The table would be a list of all NBA teams, each team paired with a number such as 83, for 83 inches tall. Continuing the previous example of employment in various company departments, suppose the summary table of the counts is already available, but not the raw data, the original data table of measurements. Maybe you found a company report that listed the count of employees in each department, and from that table, wish to create the corresponding bar chart. In this instance, read the summary table into R as the data to analyze, the values that BarChart() implicitly computed in the previous example. Or, easily compute the summary table, the category and counts, in Excel directly, as a pivot table, or even more simply with the lessR function pivot(). Or, if available from another source, enter the summary table directly into Excel. In this example, simply locate the already constructed summary table on the web. d &lt;- Read(&quot;http://web.pdx.edu/~gerbing/data/DeptCount.xlsx&quot;) After reading the data into the R data frame d, display the contents of the resulting small data frame (table). d ## Dept Freq ## 1 ACCT 5 ## 2 ADMN 6 ## 3 FINC 4 ## 4 MKTG 6 ## 5 SALE 15 This summary (pivot) data table contains the two variables relevant to the analysis, categorical variable Dept, and numerical variable Freq. The summary table contains only one row for each value (category) of Dept. The values of the numerical variable specify the scaled height of the bar for the corresponding category. To create the bar chart from the summary table, specify the categorical variable as before, and then specify the numerical variable that maps to each bar’s height. For a categorical variable named \\(x\\), and a numerical variable named \\(y\\), following is the general form of the call to BarChart() that reads data from a summary table. Figure 2.6: Instruction to create a bar chart for the categorical variable x given the numerical value of variable y for each category, both variables in the d data frame, here a summary table. For this example, the categorical \\(x\\) variable is named Dept, and the numerical \\(y\\) variable is named Freq. Both variables are in the d data frame, so no need to specify data=d in the call to BarChart() because the name d is assumed unless otherwise specified. If the numerical variable \\(y\\) is explicitly specified, BarChart() recognizes that the data are in summary (pivot) table form instead of the original measurements. When the data are a summary table, BarChart() reads the values of the \\(y\\) variable, here Freq, directly instead of computing its values. Example 2.6   BarChart(Dept, Freq) This R instruction, a function call, creates the identical bar chart shown in Figure 2.5. Here, instead of constructing the bar chart from the original measurements and let BarChart() implicitly calculate the summary table of departments and counts, BarChart() directly accesses the already computed summary table. Include the numerical variable as the second parameter value in the call to BarChart(), which indicates to read data from a two column summary (pivot) table. 2.2.1.3 More Bar Charts and Beyond There is more to know. If you would like to learn more about bar charts (including some material we cover later in this course), I wrote a fun article for medium.com (Gerbing 2019). The link provides free access. For a more comprehensive understanding of data visualization, see my May 2020 book on the topic (Gerbing 2020). 2.2.1.4 Pie Chart from Measurements An alternative to the bar chart is the pie chart. Data visualized as a bar chart for a single variable can also be represented with a pie chart. Pie Chart: Relate each level of a categorical variable to the area of a circle (pie) scaled according to the value of an associated numerical variable. As with the bar chart, obtain the pie chart of the frequencies of a categorical variable, generically named \\(x\\). Of course, replace the generic name with the actual variable name for any one analysis. After reading the data, create the ring chart version of the pie chart. Figure 2.7: Instruction to generate a pie (ring) chart of the counts of each category for the generically named categorical variable x in the d data frame. For a single variable, the pie chart presents an alternative visualization of the data provided by the bar chart. As with the bar chart, in lessR you can create the pie chart interactively by entering interact(\"PieChart\") into the R console. Figure 2.8 displays the pie chart in the form of a doughnut or ring chart. video: Pie Chart of Counts [1:26] Example 2.7   PieChart(Dept) Figure 2.8: Ring chart version of a pie chart for variable Dept in the d data frame. The doughnut or ring chart appears easier to read than a standard bar chart. But the lessR function PieChart() also can create the “old-fashioned” pie chart. We have seen the summary statistics several times now, so turn off the output to the R console here with the quiet parameter. Example 2.8   PieChart(Dept, hole=0, quiet=TRUE) Figure 2.9: Standard pie chart of variable Dept in the d data frame. Set the hole size in the doughnut or ring chart with the parameter hole, which specifies the proportion of the pie occupied by the hole. The default hole size is 0.65. Set that value to 0 to close the hole. 2.2.2 Histogram For a continuous variable, can plot the counts with a histogram. Unlike a categorical variable, a continuous variable presents many different, numeric values. The underlying continuity requires a different approach than for the bar chart, the binning of the data. The resulting visualization of how the values of a continuous variable are distributed is a histogram. Bins: A sequence of adjacent, non-overlapping intervals, each generally of the same size. Histogram: Group similar data values from a continuous variable together into a bin, then assign a single count to each bin. One possibility to create the histogram and associated statistics from a continuous variable using lessR is to enter interact(\"Histogram\") into the R console. Or, directly call the lessR function Histogram(). In this example, create the histogram for the generic variable \\(x\\). Figure 2.10: Instruction to generate a histogram of the counts for each bin for the generically named continuous variable x in the d data frame. As an example, consider the variable Salary in the d data frame, read from the data table illustrated in Figure 2.1. Find the histogram in Figure 2.11. video: Histogram [2:39] Example 2.9   Histogram(Salary) Figure 2.11: Histogram of Salary. We get not only the histogram, but the corresponding frequency distribution from which the histogram is constructed, as well as summary statistics and an outlier analysis. The frequency distribution shows the sequence of bins and how many values are located within each bin. Choosing the best size for the bins is not a task that a computer algorithm can solve. Usually better to experiment with different bin sizes. For an undersmoothed histogram, bin width is too small. For an oversmoothed histogram, bin width is too large. To control the width of the bins, use the bin_width parameter as part of the call to the Histogram() function. To adjust bin width interactively, enter interact(\"Histogram\") and click on the Bins section. Here explicitly set the bin width to 13,000 USD for the histogram of Salary instead of relying upon the default bin width provided by R. The resulting histogram in Figure 2.12 is smoother than the original in Figure 2.11. Also, in this example, turn off the console output with the quiet parameter. Example 2.10   Histogram(Salary, bin_width=13000, quiet=TRUE) Figure 2.12: Histogram of Salaries with a specified bin width of 13000. There are many different parameters for most functions, discussed in the next section. 2.2.3 Parameter Values A variety of conditions control the output of each analysis, text or visualization. A bar chart or a histogram, for example, requires colors for the bars, colors for the bar edges, labels for the axes, and many other characteristics. In terms of text output, for example, the maximum width of each line must be pre-set before analysis begins. Characteristics such as bar color and maximum line width are not hard-coded into the function but instead can be customized. This logic applies to any analysis system, such as Excel or R. Parameter: A user-controlled value of a function’s code, a placeholder, that specifies some characteristic of the way the data is processed or the output of the function is displayed. Each function includes parameters to customize input or output. For any bar chart or histogram function from any analysis system, such as Excel or R, one parameter sets the color of the bars, and another parameter sets the color of the bar edges. To use a function and have to manually select all the parameter values manually would be much too tedious. Default parameter value: A preset value of a parameter, unless explicitly changed when invoking the function. Each function consists of several or even many different parameter values set at default values. For example, the BarChart() and Histogram() parameter fill sets the color that fills the bars. By default, BarChart() displays each bar in a different color, but the bars can also be set at the same color. To change the color of all the bars to a blue shade, here set the fill parameter to \"steelblue\", one of many R defined colors.1 Explore these parameter values and their effect on the resulting visualization interactively with the lessR function interact(). To use, provide the name of the visualization contained in quotes, such as interact(\"BarChart\") or interact(\"Histogram\"). Example 2.11   BarChart(Dept, fill=&quot;steelblue&quot;) Figure 2.13: Bar chart with bars filled with a shade of blue. video: Examine the created BarChart() code from the interactive session. [3:26] Parameter values can be numeric or a character string such as a word or a letter. As is true of all computer analysis systems such as Excel and R, if a parameter value is a character string, enclose its value in quotes. For example, \"steelblue\". Specify numbers without quotes, such as 1300 in the previous example of setting the bin width of a histogram. Also, as is true of Excel and other analysis systems such as R, the general format for setting a parameter value within the call to a function follows in Figure 2.14. The three dots, ..., in the figure indicate other stuff that is part of the function call, such as a variable name. Figure 2.14: A parameter and its value in a function call. In the BarChart() example above, fill names the parameter. The value of \"steelblue\" is the specific value set for that parameter. Explicitly setting that parameter value overrides the default value of BarChart(), which provides a different color for each bar. Parameters control many aspects of the way that a function processes data, far more aspects than just color. You can rely upon the default parameter values, or add more paired parameter names and values as there are parameters to add. Customize the resulting bar chart, or rely upon the default values that lessR provides without customizing anything. Every R function has a help file that reveals the parameters associated with that function. To see all the possibilities of applying the function, display the help file for the function. To view its contents, enter a question mark, ?, followed by the function name. As another example, there is a data parameter for lessR analysis functions such as BarChart() that specifies the name of the data table that contains the variable(s) to analyze. These functions default to the data table name d, so no need to specify the parameter if referring to the default name. ?BarChart Toward the beginning of the help file, find a list of all the parameters, their default values, and an explanation of each. 2.3 Summary To use R to do a data analysis as discussed here requires at least three separate R functions. Run R either on your computer or in the cloud. Retrieve the lessR functions from your R library library(\"lessR\") Read the data from a file into R: d &lt;- Read(\"\") to browse for the file, or, d &lt;- Read(\"path name\" or \"web address\") to specify the location of the file Analyze the data values for a specific variable, generically named x. Begin with the lessR function calls that count the data values that have occurred for variable x: Histogram(x) for a continuous variable, or BarChart(x) or PieChart(x) for a categorical variable. The above steps can also be done interactively using the lessR function interact(). Beyond lessR, find many, many analysis functions in base R as originally downloaded. Find even more functions in contributed packages such as lessR. References "],["more-stuff.html", "Section 3 More Stuff 3.1 Report Generation 3.2 Miscellaneous", " Section 3 More Stuff 3.1 Report Generation Follow one of three strategies for reporting your work in R. The choice of format to use is yours. One method is to do a manual copy and paste from R output, text and graphics, into a word processing document such as Word. Or, let R do the work for you, using one of two methods: Compile Report or R Markdown. The R Markdown method is ultimately more useful, but for this class the Compile Report method works just fine. 3.1.1 Copy and Paste For the first technique, manually construct a word processing document, such as for a homework assignment. Copy and paste text and graphics output from R into the MS Word or other word processing app document. Text: All input and output to the R Console, with or without RStudio, is pure text. So select and copy the desired output and paste into MS Word or, for example, an email (no screenshot). Display the text in a mono-spaced font, such as Courier New. First, this lines up the columns of tables, and second, this distinguishes computer output in your writing from words that you write yourself, such as interpretative text. Visualizations: For RStudio use the Export button at the top of the window pane for Plots. Then select Copy to Clipboard and paste into the app such Word. Generally, re-size the image to better fit on the page. Figure 3.1: Export an image from RStudio. If running R by itself, right-click on each visualization, select Copy. 3.1.2 Compile a Report Save R input instructions in a text file and run as a single unit with output to MS Word. From the File --&gt; New File --&gt; R Script menu sequence create a new file and save. Or, start with the + sign at the top-left corner of the RStudio window to create the new text file. Then enter the R instructions into the text file window pane. From the window pane, can run the code with the Run button at the top-right of the window-pane for the file. Or, even better, click on the Compile Report button. Then choose MS Word as the output medium. Figure 3.2: Compile Report and Run buttons on the toolbar of the RStudio text file window pane. The entire R analysis will run and output to Word, including the visualizations. From there, edit the Word document as desired. Video: Compile Report [4:40] The only issue with the Word output is that if used for homework, there are no homework questions. Either copy and paste the questions into the Word doc from R, or the reverse copy sections from the R output into the homework assignment. 3.1.3 Report from R Markdown The most flexible technique from which to deliver an analysis uses R Markdown to construct the report (such as this document). Follow these directions. Develop your reports that use R for analytics directly in RStudio using R Markdown as a single, integrated report. The output can be HTML for a web page, or .docx for MS Word. R can directly generate web pages and Word documents (plus pdf’s) as standard output using R Markdown. To apply to homework assignments, copy and paste the homework questions into an RStudio text file, perhaps just the worked problems part of the homework. Then adjust R code as needed, plus your interpretations. Again, a relatively small investment of time to obtain more useful skills for doing data analysis. 3.2 Miscellaneous 3.2.1 Get Help Get Help. lessR contains several documented sets of examples, called vignettes, each of which explains how to do a specified analysis. Access the vignettes with the R function call browseVignettes(\"lessR\"). The output is shown in Figure 3.3, which opens on a web page. Click on an HTML link for a given vignette to view its web page. Figure 3.3: Available vignettes for using lessR. Alternatively, as previously indicated, access the R manual for a function by entering a ? followed by the function name. 3.2.2 Comments R recognizes as a comment any information that follows a # sign, either at the start of a new line or any place on an existing line, and write any comment you wish after that # sign that describes what the corresponding R code accomplishes. That helps you understand what you did at a later time. 3.2.3 Color Themes Data visualizations can be styled in different ways. The lessR style() function provides many color themes. The default is colors. Other styles include darkred and lightbronze. To change the style for all subsequent visualizations, enter the chosen theme name in quotes. style(\"darkred\") A call to the style function with a new theme changes many colors at once. Individual properties of a visualization can also be customized separately from the entire theme. Two essential parameters for individual customization: fill for the interior color of a region such as a bar or a point color for the color of a line segment, either by itself or as the edge of a region such as a bar or point. To see all available theme and individual properties amenable to customization, enter: style(show=TRUE) Generally, rely upon the default styles, but customize as desired. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
